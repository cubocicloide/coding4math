{
    "docs": [
        {
            "location": "/",
            "text": "Introduzione\n\n\n \nLa presente documentazione \u00e8 una guida introduttiva al linguaggio di programmazione Python. I codici relativi a tale guida sono reperibili all'interno del repository \ncoding4math\n.\n\n\n\n\n\n\nPython\n\n\n \nPython \u00e8 un linguaggio di programmazione dinamico orientato agli oggetti utilizzabile per molti tipi di sviluppo software. Offre un forte supporto all'integrazione con altri linguaggi e programmi, \u00e8 fornito di una estesa libreria standard e pu\u00f2 essere imparato in pochi giorni. Non di meno, consente di implementare algoritmi scientifici per la risoluzione di svariati problemi pratici, quali ad esempio:\n\n\n\n\n\n\nRilevazione di guasti all'interno di una rete.\n\n\nControllo di traiettorie.\n\n\nRiconoscimento facciale.\n\n\nClassificazione di utenti.\n\n\n\n\n\nViste le notevoli premesse, vale la pena di iniziare a scandagliare Python, ed \u00e8 proprio questo il fine di questo corso: fornire le basi che consentano, in seguito, di sviluppare capacit\u00e0 professionali nell'uso di questo eccellente linguaggio di programmazione.\n\n\n\n\n\n\nOracoli\n\n\n\nPrima di andare avanti, una doverosa premessa: il mondo informatico \u00e8 una giungla in continuo e rapido mutamento, la qual cosa rende pressoch\u00e9 impossibile la conoscenza di tutti i suoi meandri. Occorrono quindi degli oracoli che possano dare risposta ai nostri dilemmi, il primo dei quali \u00e8: chi sono questi oracoli? Ebbene, ne esistono di diversi, tuttavia i principali risultano essere:\n\n\n    \nGoogle\n: \u00e8 il pi\u00f9 celebre tra i motori di ricerca in Internet, al quale \u00e8 possibile richiedere le pi\u00f9 disparate informazioni che si possano immaginare.\n\n    \nStackexchange\n: \u00e8 una piattaforma informatica cui \u00e8 possibile iscriversi per fare domande e rispondere a quesiti riguardanti diverse discipline, tra le quali: Matematica, Fisica e Chimica.\n\n    \nStackoverflow\n: facente parte del gruppo Stackexchange, \u00e8 una piattaforma di domande e risposte inerenti al solo settore informatico.\n\n\n\nEbbene, tale premessa \u00e8 d'obbligo in quanto molti di voi, nelle lezioni a seguire, potrebbero avere difficolt\u00e0 nel completare alcuni passaggi o nel comprendere alcuni concetti; ciononostante, \u00e8 bene sapere che i suddetti oracoli possono darvi una mano concreta nel risolvere i problemi che incontrerete lungo il tragitto. Il consiglio spassionato \u00e8 quindi quello di consultarli ogni qualvolta vi troviate in una situazione di difficolt\u00e0. Ovviamente, tale consiglio si estende ad altri percorsi formativi che seguirete nelle vostre vite.\n\nPS: il modo migliore per consultare ciascuno degli oracoli sopra elencati, \u00e8 quello di fare uso della lingua inglese; ci\u00f2 richiede pi\u00f9 impegno, ma il risultato finale sar\u00e0 quasi certamente migliore.",
            "title": "Introduzione"
        },
        {
            "location": "/#introduzione",
            "text": "La presente documentazione \u00e8 una guida introduttiva al linguaggio di programmazione Python. I codici relativi a tale guida sono reperibili all'interno del repository  coding4math .",
            "title": "Introduzione"
        },
        {
            "location": "/#python",
            "text": "Python \u00e8 un linguaggio di programmazione dinamico orientato agli oggetti utilizzabile per molti tipi di sviluppo software. Offre un forte supporto all'integrazione con altri linguaggi e programmi, \u00e8 fornito di una estesa libreria standard e pu\u00f2 essere imparato in pochi giorni. Non di meno, consente di implementare algoritmi scientifici per la risoluzione di svariati problemi pratici, quali ad esempio:   Rilevazione di guasti all'interno di una rete.  Controllo di traiettorie.  Riconoscimento facciale.  Classificazione di utenti.   \nViste le notevoli premesse, vale la pena di iniziare a scandagliare Python, ed \u00e8 proprio questo il fine di questo corso: fornire le basi che consentano, in seguito, di sviluppare capacit\u00e0 professionali nell'uso di questo eccellente linguaggio di programmazione.",
            "title": "Python"
        },
        {
            "location": "/#oracoli",
            "text": "Prima di andare avanti, una doverosa premessa: il mondo informatico \u00e8 una giungla in continuo e rapido mutamento, la qual cosa rende pressoch\u00e9 impossibile la conoscenza di tutti i suoi meandri. Occorrono quindi degli oracoli che possano dare risposta ai nostri dilemmi, il primo dei quali \u00e8: chi sono questi oracoli? Ebbene, ne esistono di diversi, tuttavia i principali risultano essere: \n     Google : \u00e8 il pi\u00f9 celebre tra i motori di ricerca in Internet, al quale \u00e8 possibile richiedere le pi\u00f9 disparate informazioni che si possano immaginare. \n     Stackexchange : \u00e8 una piattaforma informatica cui \u00e8 possibile iscriversi per fare domande e rispondere a quesiti riguardanti diverse discipline, tra le quali: Matematica, Fisica e Chimica. \n     Stackoverflow : facente parte del gruppo Stackexchange, \u00e8 una piattaforma di domande e risposte inerenti al solo settore informatico.  \nEbbene, tale premessa \u00e8 d'obbligo in quanto molti di voi, nelle lezioni a seguire, potrebbero avere difficolt\u00e0 nel completare alcuni passaggi o nel comprendere alcuni concetti; ciononostante, \u00e8 bene sapere che i suddetti oracoli possono darvi una mano concreta nel risolvere i problemi che incontrerete lungo il tragitto. Il consiglio spassionato \u00e8 quindi quello di consultarli ogni qualvolta vi troviate in una situazione di difficolt\u00e0. Ovviamente, tale consiglio si estende ad altri percorsi formativi che seguirete nelle vostre vite. \nPS: il modo migliore per consultare ciascuno degli oracoli sopra elencati, \u00e8 quello di fare uso della lingua inglese; ci\u00f2 richiede pi\u00f9 impegno, ma il risultato finale sar\u00e0 quasi certamente migliore.",
            "title": "Oracoli"
        },
        {
            "location": "/set-up-mac/",
            "text": "Set-up (Mac OS High Sierra)\n\n\n\nIn questa sezione vedremo come installare Python 3 sul sistema operativo Mac OS High Sierra, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python. \n\n\n\n\n\n\nVerificare la versione\n\n\n\nAnche se Python 2 \u00e8 installato di default sui computer Apple, Python 3 non lo \u00e8. Potrete averne conferma eseguendo nel \nTerminal\n il seguente comando\n1\n:\n\n\n\n\n~ > python --version\nPython 2.7.10\n\n\n\n\n\nPer verificare se Python 3 \u00e8 gi\u00e0 installato, potete provare a eseguire \npython3 --version\n. Molto probabilmente otterrete un messaggio di errore; anche qualora abbiate una versione di Python 3, l'obiettivo \u00e8 installare quella pi\u00f9 recente.\n\n\n\n\n\n\nInstallare Xcode e Homebrew\n\n\n\nPer installare Python 3 faremo uso del package manager \nHomebrew\n. Quest'ultimo dipende dal software \nXcode\n distribuito gratuitamente da Apple. Abbiamo quindi bisogno di integrare Xcode nel nostro sistema, e possiamo farlo tramite la seguente istruzione da riga di comando:\n\n\n\n\n~ > xcode-select --install\n\n\n\n\n\nDurante il processo di installazione, accettare tutte le condizioni proposte\n2\n. \nIl passo successivo consiste nell'installare Homebrew\n3\n:\n\n\n\n\n~ > /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\n\n\n\nPer verificare la corretta installazione di Homebrew, eseguire infine il comando seguente:\n\n\n\n\n~ > brew doctor\nYour system is ready to brew.\n\n\n\n\n\n\nInstallare Python 3\n\n\n\nPer installare l'ultima versione di Python 3, dare la seguente istruzione:\n\n\n\n\n~ > brew install python3\n\n\n\n\n\nA questo punto, potete verificare quale versione di Python 3 \u00e8 stata resa disponibile:\n\n\n\n\n~ > python3 --version\nPython 3.7.0\n\n\n\n\n\nPer aprire la shell di Python 3 dalla linea di comando, baster\u00e0 semplicemente scrivere \npython3\n e dare invio:\n\n\n\n\n~ > python3\nPython 3.7.0 (default, Jun 29 2018, 20:13:13)\n[Clang 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n\n\n\n\n\nPer uscire dalla shell di Python 3, bisogner\u00e0 dare il comando \nexit()\n.\nSi potr\u00e0 inoltre ancora sfruttare Python 2, che era installato di default, tramite l'istruzione \npython\n:\n\n\n\n\n~ > python\nPython 2.7.15 (default, Jun 17 2018, 12:46:58)\n[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n\n\n\n\n\n\nCreare l'ambiente virtuale\n\n\n\n\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella \nvirtualenv/\n all'interno della home directory. Creiamo quindi tale cartella:\n\n\n\n\n~ > mkdir ~/virtualenvs\n\n\n\n\n\nMediante l'ausilio del modulo \nvenv\n incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo \nmyvenv\n:\n\n\n\n\n~ > python3 -m venv ~/virtualenvs/myvenv\n\n\n\n\n\nAvendo utilizzato il termine \npython3\n, il nostro ambiente virtuale riconosce che quando digitiamo \npython\n per assegnare un comando, intendiamo utilizzare Python 3, non Python 2. Per attivare l'ambiente virtuale appena inizializzato, sar\u00e0 sufficiente eseguire:\n\n\n\n\n~ > source ~/virtualenvs/myvenv/bin/activate\n(myvenv) ~ >\n\n\n\n\n\nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando \npip freeze\n per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale. \n\n\nPer disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente la finestra del Terminal, oppure si pu\u00f2 dare la seguente istruzione: \n\n\n\n\n(myvenv) ~ > deactivate\n\u279c ~\n\n\n\n\n\n\nInstallare Sublime Text\n\n\n\nPer poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE (Integrated Development Environment) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8 \nSublime Text\n, il cui file \ndmg\n pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice esecuzione. \n\n\n\n\n\n\nEseguire uno script\n\n\n\nNel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato \nmain.py\n, il quale stamper\u00e0 sulla linea di comando la scritta \nHello World.\n. \n\n\n\n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n            \nStep 1\n\n            \nAprire l'IDE Sublime Text e selezionare \nFile > Open...\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 2\n\n            \nScegliere la cartella \n~/virtualenvs/myvenv\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 3\n\n            \nSelezionare \nmyvenv > New Folder\n e aggiungere la cartella \nsrc\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 4\n\n            \nSelezionare \nsrc > New File\n e aggiungere il file \nmain.py\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 5\n\n            \nIn \nmain.py\n scrivere il codice \nprint('Hello World.')\n e salvare\n\n        \n\n    \n\n  \n\n  \n\n    \n\n    \nPrevious\n\n  \n\n  \n\n    \n\n    \nNext\n\n  \n\n\n\n\nAdesso che abbiamo a nostra disposizione il nostro primo script Python, potremo infine eseguirlo tramite la seguente successione di comandi:\n\n\n\n\n~ > source ~/virtualenvs/myvenv/bin/activate\n(myvenv) ~ > cd virtualenvs/myvenv/src\n(myvenv) src > python main.py\nHello World.\n\n\n\n\n\nSi noti che: col comando \nsource ~/virtualenvs/myvenv/bin/activate\n si attiva l'ambiente virtuale; col comando \ncd virtualenvs/myvenv/src\n si entra nella cartella \nsrc\n dove \u00e8 ubicato lo script \nmain.py\n; infine col comando \npython main.py\n si esegue il predetto script che, come possiamo vedere, stampa sulla linea di comando il messaggio \nHello World.\n.\n\n\n\n\n1. Si noti che il simbolo \n~\n indica la home directory del sistema operativo, solitamente ubicata nel path \n/Users/nomeutente\n. Inoltre la dicitura \ncartella >\n indica che ci troviamo nella directory \ncartella\n del sistema operativo.\n\n\n2. La installazione di Xcode potrebbe richiedere da pochi minuti ad alcune ore.\n\n\n3. Il comando di installazione di Homebrew \u00e8 reperibile anche presso il sito ufficiale di Homebrew.",
            "title": "Set-up (Mac OS High Sierra)"
        },
        {
            "location": "/set-up-mac/#set-up-mac-os-high-sierra",
            "text": "In questa sezione vedremo come installare Python 3 sul sistema operativo Mac OS High Sierra, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python.",
            "title": "Set-up (Mac OS High Sierra)"
        },
        {
            "location": "/set-up-mac/#verificare-la-versione",
            "text": "Anche se Python 2 \u00e8 installato di default sui computer Apple, Python 3 non lo \u00e8. Potrete averne conferma eseguendo nel  Terminal  il seguente comando 1 :  ~ > python --version\nPython 2.7.10  \nPer verificare se Python 3 \u00e8 gi\u00e0 installato, potete provare a eseguire  python3 --version . Molto probabilmente otterrete un messaggio di errore; anche qualora abbiate una versione di Python 3, l'obiettivo \u00e8 installare quella pi\u00f9 recente.",
            "title": "Verificare la versione"
        },
        {
            "location": "/set-up-mac/#installare-xcode-e-homebrew",
            "text": "Per installare Python 3 faremo uso del package manager  Homebrew . Quest'ultimo dipende dal software  Xcode  distribuito gratuitamente da Apple. Abbiamo quindi bisogno di integrare Xcode nel nostro sistema, e possiamo farlo tramite la seguente istruzione da riga di comando:  ~ > xcode-select --install  \nDurante il processo di installazione, accettare tutte le condizioni proposte 2 . \nIl passo successivo consiste nell'installare Homebrew 3 :  ~ > /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"  \nPer verificare la corretta installazione di Homebrew, eseguire infine il comando seguente:  ~ > brew doctor\nYour system is ready to brew.",
            "title": "Installare Xcode e Homebrew"
        },
        {
            "location": "/set-up-mac/#installare-python-3",
            "text": "Per installare l'ultima versione di Python 3, dare la seguente istruzione:  ~ > brew install python3  \nA questo punto, potete verificare quale versione di Python 3 \u00e8 stata resa disponibile:  ~ > python3 --version\nPython 3.7.0  \nPer aprire la shell di Python 3 dalla linea di comando, baster\u00e0 semplicemente scrivere  python3  e dare invio:  ~ > python3\nPython 3.7.0 (default, Jun 29 2018, 20:13:13)\n[Clang 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>  \nPer uscire dalla shell di Python 3, bisogner\u00e0 dare il comando  exit() .\nSi potr\u00e0 inoltre ancora sfruttare Python 2, che era installato di default, tramite l'istruzione  python :  ~ > python\nPython 2.7.15 (default, Jun 17 2018, 12:46:58)\n[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>",
            "title": "Installare Python 3"
        },
        {
            "location": "/set-up-mac/#creare-lambiente-virtuale",
            "text": "\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella  virtualenv/  all'interno della home directory. Creiamo quindi tale cartella:  ~ > mkdir ~/virtualenvs  \nMediante l'ausilio del modulo  venv  incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo  myvenv :  ~ > python3 -m venv ~/virtualenvs/myvenv  \nAvendo utilizzato il termine  python3 , il nostro ambiente virtuale riconosce che quando digitiamo  python  per assegnare un comando, intendiamo utilizzare Python 3, non Python 2. Per attivare l'ambiente virtuale appena inizializzato, sar\u00e0 sufficiente eseguire:  ~ > source ~/virtualenvs/myvenv/bin/activate\n(myvenv) ~ >  \nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando  pip freeze  per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale.  \nPer disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente la finestra del Terminal, oppure si pu\u00f2 dare la seguente istruzione:   (myvenv) ~ > deactivate\n\u279c ~",
            "title": "Creare l'ambiente virtuale"
        },
        {
            "location": "/set-up-mac/#installare-sublime-text",
            "text": "Per poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE (Integrated Development Environment) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8  Sublime Text , il cui file  dmg  pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice esecuzione.",
            "title": "Installare Sublime Text"
        },
        {
            "location": "/set-up-mac/#eseguire-uno-script",
            "text": "Nel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato  main.py , il quale stamper\u00e0 sulla linea di comando la scritta  Hello World. .",
            "title": "Eseguire uno script"
        },
        {
            "location": "/set-up-windows/",
            "text": "Set-up (Windows 10)\n\n\n\nIn questa sezione vedremo come installare Python 3 sul sistema operativo Windows 10, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python. \n\n\n\n\n\n\nInstallare Python 3\n\n\n\nIl primo passo \u00e8 recarsi presso il \nsito ufficiale\n e scaricare il file eseguibile (estensione \nexe\n) necessario all'installazione di Python 3 (al tempo in cui scrivo, siamo alla versione 3.7.0). Terminato il download, lanciare il file eseguibile e, prima di procedere con l'installazione, selezionare la voce \nAdd Python 3.7 to PATH\n (ci\u00f2 consentir\u00e0 al command prompt di riconoscere il comando \npython\n)\n1\n. A questo punto, cliccare su \nInstall Now\n e seguire la procedura guidata che ci consentir\u00e0 di terminare l'installazione di Python 3.\nRicapitoliamo schematicamente quanto appena detto attraverso il seguente slider.\n\n\n\n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n            \nStep 1\n\n            \nVisitare la pagina di Download di Python\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 2\n\n            \nCliccare su \nDownload Python 3.7.0\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 3\n\n            \nLanciare l'eseguibile scaricato\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 4\n\n            \nSelezionare la voce \nAdd Python 3.7 to PATH\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 5\n\n            \nCliccare \nInstall Now\n e seguire la procedura guidata per terminare l'installazione\n\n        \n\n    \n\n  \n\n  \n\n    \n\n    \nPrevious\n\n  \n\n  \n\n    \n\n    \nNext\n\n  \n\n\n\n\n\n\n\n\n\nCreare l'ambiente virtuale\n\n\n\n\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella \nvirtualenvs\n all'interno della cartella \nhome\n, quest'ultima ubicata nel percorso \nC:\\Users\\nomeutente\n e generalmente indicata con il simbolo \n~\n. Detto questo, dopo aver aperto \nCommand Prompt\n, possiamo creare la cartella \nvirtualenvs\n ed entrare in essa eseguendo nel prompt i comandi seguenti:\n2\n\n\n\n\n\n~ > mkdir virtualenvs\n~ > cd virtualenvs\nvirtualenvs >\n\n\n\n\n\nSi noti che col comando \nmkdir virtualenvs\n creiamo la cartella \nvirtualenvs\n (di fatto \nmkdir\n \u00e8 un diminutivo di \nmake directory\n, ossia \ncrea la cartella\n), mentre col comando \ncd virtualenvs\n entriamo all'interno della cartella \nvirtualenvs\n (in tal caso \ncd\n \u00e8 l'acronimo di \nchange directory\n, ovvero \nentra nella cartella\n).\n\n\u00a0 A questo punto, mediante l'ausilio del modulo \nvenv\n incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo \nmyvenv\n:\n\n\n\n\nvirtualenvs > python -m venv myvenv\n\n\n\n\n\nIl comando di cui sopra consente di generare una serie di cartelle e file, di modo che il nostro file system presenti, allo stato attuale, la struttura seguente:\n\n\n\n\n~\n|__virtualenvs\n   |__myvenv\n      |__Include\n      |__Lib\n      |__Scripts\n      |__pyvenv.cfg\n\n\n\n\n\nPossiamo adesso entrare nella cartella \nmyvenv\n e attivare l'ambiente virtuale tramite i comandi:\n\n\n\n\nvirtualenvs > cd myvenv\nmyvenv > Scripts\\activate\n(myvenv) myvenv >\n\n\n\n\n\nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando \npip freeze\n per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale.\n\n\u00a0 Per disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente il command prompt, oppure si pu\u00f2 dare la seguente istruzione: \n\n\n\n\n(myvenv) myvenv > deactivate\nmyvenv >\n\n\n\n\nNel seguente slider vi \u00e8 infine una rappresentazione schematica dei passi sopra illustrati.\n\n\n\n\n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n            \nStep 1\n\n            \nDigitare \ncmd\n sulla barra di ricerca e aprire \nCommand Prompt\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 2\n\n            \nSiete adesso nella cartella \nC:\\Users\\nomeutente\n, detta cartella \nhome\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 3\n\n            \nCreare la cartella \nvirtualenvs\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 4\n\n            \nEntrare nella cartella \nvirtualenvs\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 5\n\n            \nCreare l'ambiente virtuale \nmyvenv\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 6\n\n            \nEntrare nella cartella \nmyvenv\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 7\n\n            \nAttivare l'ambiente virtuale\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 8\n\n            \nDisattivare l'ambiente virtuale\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 9\n\n            \nVisualizzare il contenuto dell'ambiente virtuale appena creato\n\n        \n\n    \n\n  \n\n  \n\n    \n\n    \nPrevious\n\n  \n\n  \n\n    \n\n    \nNext\n\n  \n\n\n\n\n\n\n\n\n\nInstallare Sublime Text\n\n\n\nPer poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE (\nIntegrated Development Environment\n, anche detto \neditor di testo\n) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8 \nSublime Text\n, il cui file \nexe\n pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice procedura guidata. \n\n\n\n\n\n\nEseguire uno script\n\n\n\nNel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato \nmain.py\n, il quale stamper\u00e0 sulla linea di comando la scritta \nHello World.\n. \n\n\n\n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n            \nStep 1\n\n            \nAprire l'IDE Sublime Text e selezionare \nFile > Open Folder...\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 2\n\n            \nScegliere la cartella \n~\\virtualenvs\\myvenv\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 3\n\n            \nSelezionare \nmyvenv > New Folder\n e aggiungere la cartella \nsrc\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 4\n\n            \nSelezionare \nsrc > New File\n e aggiungere il file \nmain.py\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 5\n\n            \nIn \nmain.py\n scrivere il codice \nprint('Hello World.')\n e salvare\n\n        \n\n    \n\n  \n\n  \n\n    \n\n    \nPrevious\n\n  \n\n  \n\n    \n\n    \nNext\n\n  \n\n\n\n\nAdesso che abbiamo a nostra disposizione il nostro primo script Python, potremo infine eseguirlo nel command prompt tramite la seguente successione di comandi:\n\n\n\n\n~ > cd virtualenvs\\myvenv\\\nmyvenv > Scripts\\activate\n(myvenv) myvenv > cd src\n(myvenv) src > python main.py\nHello World.\n\n\n\n\n\nSi noti che: col comando \ncd virtualenvs\\myvenv\\\n si entra nella cartella \nmyvenv\n; col comando \nScripts\\activate\n si attiva l'ambiente virtuale; col comando \ncd src\n si entra nella cartella \nsrc\n dove \u00e8 ubicato lo script \nmain.py\n; infine col comando \npython main.py\n si esegue il predetto script che, come possiamo vedere, stampa sulla linea di comando il messaggio \nHello World.\n.\n\n\n\n\n1. Se non si seleziona subito la voce \nAdd Python 3.7 to PATH\n, bisogner\u00e0 aggiungere manualmente, all'interno della variabile d'ambiente PATH, il percorso che punta all'interprete Python 3.7.\n\n\n\n2. Si noti che, all'interno del prompt, la dicitura \nfolder >\n indica che ci troviamo nella cartella \nfolder\n del sistema operativo.",
            "title": "Set-up (Windows 10)"
        },
        {
            "location": "/set-up-windows/#set-up-windows-10",
            "text": "In questa sezione vedremo come installare Python 3 sul sistema operativo Windows 10, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python.",
            "title": "Set-up (Windows 10)"
        },
        {
            "location": "/set-up-windows/#installare-python-3",
            "text": "Il primo passo \u00e8 recarsi presso il  sito ufficiale  e scaricare il file eseguibile (estensione  exe ) necessario all'installazione di Python 3 (al tempo in cui scrivo, siamo alla versione 3.7.0). Terminato il download, lanciare il file eseguibile e, prima di procedere con l'installazione, selezionare la voce  Add Python 3.7 to PATH  (ci\u00f2 consentir\u00e0 al command prompt di riconoscere il comando  python ) 1 . A questo punto, cliccare su  Install Now  e seguire la procedura guidata che ci consentir\u00e0 di terminare l'installazione di Python 3.\nRicapitoliamo schematicamente quanto appena detto attraverso il seguente slider.",
            "title": "Installare Python 3"
        },
        {
            "location": "/set-up-windows/#creare-lambiente-virtuale",
            "text": "\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella  virtualenvs  all'interno della cartella  home , quest'ultima ubicata nel percorso  C:\\Users\\nomeutente  e generalmente indicata con il simbolo  ~ . Detto questo, dopo aver aperto  Command Prompt , possiamo creare la cartella  virtualenvs  ed entrare in essa eseguendo nel prompt i comandi seguenti: 2   ~ > mkdir virtualenvs\n~ > cd virtualenvs\nvirtualenvs >  \nSi noti che col comando  mkdir virtualenvs  creiamo la cartella  virtualenvs  (di fatto  mkdir  \u00e8 un diminutivo di  make directory , ossia  crea la cartella ), mentre col comando  cd virtualenvs  entriamo all'interno della cartella  virtualenvs  (in tal caso  cd  \u00e8 l'acronimo di  change directory , ovvero  entra nella cartella ). \n\u00a0 A questo punto, mediante l'ausilio del modulo  venv  incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo  myvenv :  virtualenvs > python -m venv myvenv  \nIl comando di cui sopra consente di generare una serie di cartelle e file, di modo che il nostro file system presenti, allo stato attuale, la struttura seguente:  ~\n|__virtualenvs\n   |__myvenv\n      |__Include\n      |__Lib\n      |__Scripts\n      |__pyvenv.cfg  \nPossiamo adesso entrare nella cartella  myvenv  e attivare l'ambiente virtuale tramite i comandi:  virtualenvs > cd myvenv\nmyvenv > Scripts\\activate\n(myvenv) myvenv >  \nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando  pip freeze  per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale. \n\u00a0 Per disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente il command prompt, oppure si pu\u00f2 dare la seguente istruzione:   (myvenv) myvenv > deactivate\nmyvenv >  Nel seguente slider vi \u00e8 infine una rappresentazione schematica dei passi sopra illustrati.",
            "title": "Creare l'ambiente virtuale"
        },
        {
            "location": "/set-up-windows/#installare-sublime-text",
            "text": "Per poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE ( Integrated Development Environment , anche detto  editor di testo ) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8  Sublime Text , il cui file  exe  pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice procedura guidata.",
            "title": "Installare Sublime Text"
        },
        {
            "location": "/set-up-windows/#eseguire-uno-script",
            "text": "Nel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato  main.py , il quale stamper\u00e0 sulla linea di comando la scritta  Hello World. .",
            "title": "Eseguire uno script"
        },
        {
            "location": "/sintassi-di-base/",
            "text": "Sintassi di base\n\n\nIn questa sezione forniremo alcune regole sintattiche di base del linguaggio Python, le quali ci serviranno per scrivere in modo corretto il nostro codice.\n\n\n\n\nIdentificatori\n\n\n\nUn identificatore \u00e8 il nome con cui sono rappresentate costanti, variabili, metodi, classi e moduli. Un identificatore pu\u00f2 essere costituito da una lettera maiuscola, minuscola o dal simbolo underscore seguito da altri caratteri, che a loro volta possono essere una qualsiasi combinazione di lettere maiuscole e minuscole, underscore e cifre. I caratteri minuscoli corrispondono alle lettere minuscole dell\u2019alfabeto dalla a alla z, compreso il simbolo underscore, mentre i caratteri maiuscoli corrispondono alle lettere maiuscole dell\u2019alfabeto dalla A alla Z e le cifre da 0 al 9. Il numero di caratteri che compongono il nome non \u00e8 limitato.\n\n\u00a0 Gli identificatori non possono contenere spazi vuoti o caratteri di punteggiatura, quali ad esempio @, $ e %. Python \u00e8 un linguaggio \ncase sensitive\n, ci\u00f2 vuol dire che \nvar\n e \nVar\n sono due identificatori diversi. Vi sono inoltre alcune convenzioni di denominazione che vengono seguite all'interno della comunit\u00e0 di programmatori Python:\n\n\n\ngli identificatori delle classi cominciano con una lettera maiuscola, mentre gli altri identificatori cominciano con una lettera maiuscola;\n\n\nse un identificatore si compone di pi\u00f9 parole, queste vengono separate da un underscore (es. \nvar_1\n).\n\n\n\nInoltre, l'utilizzo degli underscore all'inizio o alla fine di un identificatore, \u00e8 soggetto ad alcune convenzioni e regole che sono esposte nella tabella seguente.\n\n\n\n\n\n\n\n\n\n\n\nTipo\n\n\nEsempio\n\n\nSignificato\n\n\n\n\n\n\n\n\n\n\nSingle leading underscore\n\n\n_var\n\n\nConvenzione indicante che l'identificatore \u00e8 destinato ad essere privato.\n\n\n\n\n\n\nSingle trailing underscore\n\n\nvar_\n\n\nConvenzione utilizzata per evitare conflitti con le parole chiave di Python.\n\n\n\n\n\n\nDouble leading underscore\n\n\n__var\n\n\nUtilizzata all'interno delle classi per innescare il cosiddetto \nname mangling\n.\n\n\n\n\n\n\nDouble leading and trailing underscore\n\n\n__var__\n\n\nUsato come identificatore di metodi speciali definiti dal linguaggio Python. Questo tipo di identificatore non va usato per rappresentare le vostre variabili.\n\n\n\n\n\n\nSingle underscore\n\n\n_\n\n\nTalvolta usato come identificatore per variabili temporanee o insignificanti\n\n\n\n\n\n\n\n\n\n\nParole chiave\n\n\n\nLa lista seguente mostra le parole chiave di Python. Queste sono parole riservate che non possono essere usate come identificatori. Tutte le parole chiave di Python contengono solo lettere minuscole.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParole chiave\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nand\n\n\nassert\n\n\nbreak\n\n\nclass\n\n\ncontinue\n\n\n\n\n\n\ndef\n\n\ndel\n\n\nelif\n\n\nelse\n\n\nexcept\n\n\n\n\n\n\nexec\n\n\nfinally\n\n\nfor\n\n\nfrom\n\n\nglobal\n\n\n\n\n\n\nif\n\n\nimport\n\n\nin\n\n\nis\n\n\nlambda\n\n\n\n\n\n\nnot\n\n\nor\n\n\npass\n\n\nprint\n\n\nraise\n\n\n\n\n\n\nreturn\n\n\ntry\n\n\nwhile\n\n\nwith\n\n\nyield\n\n\n\n\n\n\n\n\n\n\nIndentazione del codice\n\n\n\nUna caratteristica essenziale del linguaggio di programmazione Python \u00e8 il metodo che utilizza per delimitare i blocchi di programma, e cio\u00e8 l\u2019indentazione del codice. Per indentazione del codice, si intende quella tecnica utilizzata nella programmazione attraverso la quale si evidenziano dei blocchi di programma con l\u2019inserimento di una certa quantit\u00e0 di spazio vuoto all\u2019inizio di una riga di testo, allo scopo di aumentarne la leggibilit\u00e0. Cos\u00ec ogni riga viene indentata di un certo numero di spazi che dipende dalla sua posizione all\u2019interno della struttura logica del programma. L'indentazione inizia un blocco e la rimozione dell'indentazione lo termina. Un esempio schematico di indentazione \u00e8 fornito dalla figura seguente, nella quale \u00e8 possibile riconoscere i diversi blocchi di codice sulla base del loro livello di indentazione.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDunque Python, invece di usare parentesi o parole chiave, usa l\u2019indentazione stessa per indicare i blocchi nidificati; a tal proposito si possono usare sia una tabulazione, sia un numero arbitrario di spazi bianchi, ma lo standard Python prevede 4 spazi bianchi. Nella fattispecie, si aggiungono 4 nuovi spazi se si vuole incominciare un nuovo blocco, e si rimuovono 4 spazi se si vuole terminare un blocco esistente.\n\n\u00a0 La cosa da ricordare \u00e8 che l'indentazione in Python non \u00e8 facoltativa ma \u00e8 una regola, nel senso che se si omette l\u2019indentazione  allora l\u2019interprete ci restituir\u00e0 un messaggio di errore. A titolo di esempio, si consideri il seguente codice, correttamente indentato, che rappresenta una classica struttura condizionale:\n\n\n\n\nif True:\n    print('True')\nelse:\n    print('False')\n\n\n\n\n\nEbbene, se proviamo a eliminare l'indentazione dal suddetto codice, ovvero se scriviamo:\n\n\n\n\nif True:\nprint('True')\nelse:\nprint('False')\n\n\n\n\n\nallora l'interprete Python restituir\u00e0 il messaggio di errore: \n\n\n\n\nIndentationError: expected an indented block\n\n\n\n\n\n\nIstruzioni multi-linea\n\n\n\nLe istruzioni in Python tipicamente terminano con l'andata a capo. Tuttavia, \u00e8 consentito l'uso del carattere di continuazione (\n\\\n) per indicare che l'istruzione continua alla linea successiva. Ad esempio:\n\n\n\n\ntotal = item_one + \\\n        item_two + \\\n        item_three\n\n\n\n\n\nLe istruzioni contenute all'interno delle parentesi \n()\n, \n[]\n o \n{}\n non necessitano dell'utilizzo del carattere di continuazione. Ad esempio:\n\n\n\n\ndays = ['Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday']\n\n\n\n\n\n\nVirgolette\n\n\n\nPython accetta singole (\n'\n), doppie (\n\"\n) e triple (\n'''\n o \n\"\"\"\n) virgolette per indicare i valori letterali di una stringa, purch\u00e9 lo stesso tipo di virgolette inizi e termini la stringa.\n\n\u00a0 Le triple virgolette sono usate per estendere il contenuto della stringa su pi\u00f9 righe. Ad esempio, tutte le seguenti istruzioni sono consentite:\n\n\n\n\nparola = 'parola'\nfrase = \"Questa \u00e8 una frase.\"\nparagrafo = \"\"\"Questo \u00e8 un paragrafo. Esso si\n               compone di pi\u00f9 righe e frasi.\"\"\"\n\n\n\n\n\n\nCommenti\n\n\n\nIl cancelletto (\n#\n), quando non si trova all'interno di una stringa letterale, definisce l'inizio un commento. Tutti i caratteri dopo il simbolo \n#\n, e fino alla fine della riga, faranno parte del commento e l'interprete Python li ignorer\u00e0. Si consideri ad esempio lo script:\n\n\n\n\n# Primo commento\nprint('Hello, Python!') # secondo commento\n\n\n\n\nTale script, quando eseguito, produrr\u00e0 il risultato seguente:\n\n\nHello, Python!\n\n\n\n\n\nI commenti che si estendono su pi\u00f9 righe saranno invece delimitati dalle triple virgolette \n\"\"\"\n:\n\n\n\n\n\"\"\"\nQuesto \u00e8 un commento che si dilunga\nsu pi\u00f9 righe.\n\"\"\"\nprint('Hello, Python!')",
            "title": "Sintassi di base"
        },
        {
            "location": "/sintassi-di-base/#sintassi-di-base",
            "text": "In questa sezione forniremo alcune regole sintattiche di base del linguaggio Python, le quali ci serviranno per scrivere in modo corretto il nostro codice.",
            "title": "Sintassi di base"
        },
        {
            "location": "/sintassi-di-base/#identificatori",
            "text": "Un identificatore \u00e8 il nome con cui sono rappresentate costanti, variabili, metodi, classi e moduli. Un identificatore pu\u00f2 essere costituito da una lettera maiuscola, minuscola o dal simbolo underscore seguito da altri caratteri, che a loro volta possono essere una qualsiasi combinazione di lettere maiuscole e minuscole, underscore e cifre. I caratteri minuscoli corrispondono alle lettere minuscole dell\u2019alfabeto dalla a alla z, compreso il simbolo underscore, mentre i caratteri maiuscoli corrispondono alle lettere maiuscole dell\u2019alfabeto dalla A alla Z e le cifre da 0 al 9. Il numero di caratteri che compongono il nome non \u00e8 limitato. \n\u00a0 Gli identificatori non possono contenere spazi vuoti o caratteri di punteggiatura, quali ad esempio @, $ e %. Python \u00e8 un linguaggio  case sensitive , ci\u00f2 vuol dire che  var  e  Var  sono due identificatori diversi. Vi sono inoltre alcune convenzioni di denominazione che vengono seguite all'interno della comunit\u00e0 di programmatori Python:  gli identificatori delle classi cominciano con una lettera maiuscola, mentre gli altri identificatori cominciano con una lettera maiuscola;  se un identificatore si compone di pi\u00f9 parole, queste vengono separate da un underscore (es.  var_1 ).  \nInoltre, l'utilizzo degli underscore all'inizio o alla fine di un identificatore, \u00e8 soggetto ad alcune convenzioni e regole che sono esposte nella tabella seguente.      Tipo  Esempio  Significato      Single leading underscore  _var  Convenzione indicante che l'identificatore \u00e8 destinato ad essere privato.    Single trailing underscore  var_  Convenzione utilizzata per evitare conflitti con le parole chiave di Python.    Double leading underscore  __var  Utilizzata all'interno delle classi per innescare il cosiddetto  name mangling .    Double leading and trailing underscore  __var__  Usato come identificatore di metodi speciali definiti dal linguaggio Python. Questo tipo di identificatore non va usato per rappresentare le vostre variabili.    Single underscore  _  Talvolta usato come identificatore per variabili temporanee o insignificanti",
            "title": "Identificatori"
        },
        {
            "location": "/sintassi-di-base/#parole-chiave",
            "text": "La lista seguente mostra le parole chiave di Python. Queste sono parole riservate che non possono essere usate come identificatori. Tutte le parole chiave di Python contengono solo lettere minuscole.        Parole chiave        and  assert  break  class  continue    def  del  elif  else  except    exec  finally  for  from  global    if  import  in  is  lambda    not  or  pass  print  raise    return  try  while  with  yield",
            "title": "Parole chiave"
        },
        {
            "location": "/sintassi-di-base/#indentazione-del-codice",
            "text": "Una caratteristica essenziale del linguaggio di programmazione Python \u00e8 il metodo che utilizza per delimitare i blocchi di programma, e cio\u00e8 l\u2019indentazione del codice. Per indentazione del codice, si intende quella tecnica utilizzata nella programmazione attraverso la quale si evidenziano dei blocchi di programma con l\u2019inserimento di una certa quantit\u00e0 di spazio vuoto all\u2019inizio di una riga di testo, allo scopo di aumentarne la leggibilit\u00e0. Cos\u00ec ogni riga viene indentata di un certo numero di spazi che dipende dalla sua posizione all\u2019interno della struttura logica del programma. L'indentazione inizia un blocco e la rimozione dell'indentazione lo termina. Un esempio schematico di indentazione \u00e8 fornito dalla figura seguente, nella quale \u00e8 possibile riconoscere i diversi blocchi di codice sulla base del loro livello di indentazione. \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n\nDunque Python, invece di usare parentesi o parole chiave, usa l\u2019indentazione stessa per indicare i blocchi nidificati; a tal proposito si possono usare sia una tabulazione, sia un numero arbitrario di spazi bianchi, ma lo standard Python prevede 4 spazi bianchi. Nella fattispecie, si aggiungono 4 nuovi spazi se si vuole incominciare un nuovo blocco, e si rimuovono 4 spazi se si vuole terminare un blocco esistente. \n\u00a0 La cosa da ricordare \u00e8 che l'indentazione in Python non \u00e8 facoltativa ma \u00e8 una regola, nel senso che se si omette l\u2019indentazione  allora l\u2019interprete ci restituir\u00e0 un messaggio di errore. A titolo di esempio, si consideri il seguente codice, correttamente indentato, che rappresenta una classica struttura condizionale:  if True:\n    print('True')\nelse:\n    print('False')  \nEbbene, se proviamo a eliminare l'indentazione dal suddetto codice, ovvero se scriviamo:  if True:\nprint('True')\nelse:\nprint('False')  \nallora l'interprete Python restituir\u00e0 il messaggio di errore:   IndentationError: expected an indented block",
            "title": "Indentazione del codice"
        },
        {
            "location": "/sintassi-di-base/#istruzioni-multi-linea",
            "text": "Le istruzioni in Python tipicamente terminano con l'andata a capo. Tuttavia, \u00e8 consentito l'uso del carattere di continuazione ( \\ ) per indicare che l'istruzione continua alla linea successiva. Ad esempio:  total = item_one + \\\n        item_two + \\\n        item_three  \nLe istruzioni contenute all'interno delle parentesi  () ,  []  o  {}  non necessitano dell'utilizzo del carattere di continuazione. Ad esempio:  days = ['Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday']",
            "title": "Istruzioni multi-linea"
        },
        {
            "location": "/sintassi-di-base/#virgolette",
            "text": "Python accetta singole ( ' ), doppie ( \" ) e triple ( '''  o  \"\"\" ) virgolette per indicare i valori letterali di una stringa, purch\u00e9 lo stesso tipo di virgolette inizi e termini la stringa. \n\u00a0 Le triple virgolette sono usate per estendere il contenuto della stringa su pi\u00f9 righe. Ad esempio, tutte le seguenti istruzioni sono consentite:  parola = 'parola'\nfrase = \"Questa \u00e8 una frase.\"\nparagrafo = \"\"\"Questo \u00e8 un paragrafo. Esso si\n               compone di pi\u00f9 righe e frasi.\"\"\"",
            "title": "Virgolette"
        },
        {
            "location": "/sintassi-di-base/#commenti",
            "text": "Il cancelletto ( # ), quando non si trova all'interno di una stringa letterale, definisce l'inizio un commento. Tutti i caratteri dopo il simbolo  # , e fino alla fine della riga, faranno parte del commento e l'interprete Python li ignorer\u00e0. Si consideri ad esempio lo script:  # Primo commento\nprint('Hello, Python!') # secondo commento  Tale script, quando eseguito, produrr\u00e0 il risultato seguente:  Hello, Python!  \nI commenti che si estendono su pi\u00f9 righe saranno invece delimitati dalle triple virgolette  \"\"\" :  \"\"\"\nQuesto \u00e8 un commento che si dilunga\nsu pi\u00f9 righe.\n\"\"\"\nprint('Hello, Python!')",
            "title": "Commenti"
        },
        {
            "location": "/variabili/",
            "text": "Variabili\n\n\n\nLe variabili non sono altro che locazioni di memoria in cui \u00e8 possibile immagazzinare dei dati. Ci\u00f2 significa che quando si crea una variabile, viene riservata una cella memoria. In base al tipo di una variabile, l'interprete decide poi cosa potr\u00e0 essere memorizzato in essa. All'interno di una variabile, in funzione dei diversi tipi di dati, sar\u00e0 quindi possibile memorizzare, ad esempio, numeri interi, decimali o caratteri.\n\n\n\n\n\n\nAssegnare valori alle variabili\n\n\n\nUna variabile Python non ha bisogno di una dichiarazione esplicita affinch\u00e9 le venga riservata una locazione di memoria. Infatti, la dichiarazione avviene automaticamente quando, alla variabile, viene assegnato un valore.\n\n\n\u00a0 Per assegnare un valore a una variabile viene utilizzato il segno di uguaglianza (\n=\n). L'operando alla sinistra di \n=\n sar\u00e0 il nome della variabile, mentre l'operando a destra di \n=\n sar\u00e0 il valore memorizzato nella variabile. Ad esempio:\n\n\n\n\ncounter = 100          # numero intero\nmiles   = 1000.1       # floating point\nname    = \"John\"       # stringa\n\nprint(counter)\nprint(miles)\nprint(name)\n\n\n\n\n\nIn questo caso, abbiamo che 100, 1000.1 e \"John\" sono i valori assegnati alle variabili \ncounter\n, \nmiles\n e \nname\n. Il suddetto script produrr\u00e0 il risultato seguente:\n\n\n\n\n100\n1000.1\nJohn\n\n\n\n\n\n\nTipi di dati standard\n\n\n\nI dati in memoria possono essere di diversi tipi. Per esempio, l'et\u00e0 di una persona viene immagazzinata come un numero intero, mentre il suo indirizzo \u00e8 memorizzato tramite caratteri alfanumerici. Python possiede una variet\u00e0 di tipi di dati standard, per i quali sono state definite operazioni e metodi che su essi possono essere utilizzati. Nello specifico, esistono 5 tipi di dati standard:\n\n\n\nNumeri\n\n\nStringhe\n\n\nListe\n\n\nTuple\n\n\nDizionari\n\n\n\n\n\n\n\n\n\nNumeri\n\n\n\nI tipi di dati numerici vengono creati quando si assegna loro un valore numerico, ad esempio:\n\n\n\n\nvar_1 = 1\nvar_2 = 10\n\n\n\n\n\nPython supporta quattro diversi tipi di dati numerici:\n\n\n\nint\n: numeri interi con segno (i.e., positivi o negativi)\n\n\nfloat\n: numeri con virgola mobile (e.g., numeri razionali o reali)\n\n\ncomplex\n: numeri complessi\n\n\nlong\n: numeri interi lunghi (possono anche essere espressi in base ottale o esadecimale)\n\n\n\nDi seguito proponiamo alcuni esempi delle sopra elencate tipologie di numeri:\n\n\n\n\n\n\n\n\n\n\nint\n\n\nfloat\n\n\ncomplex\n\n\nlong\n\n\n\n\n\n\n\n\n\n\n10\n\n\n0.0\n\n\n3.14j\n\n\n51924361L\n\n\n\n\n\n\n100\n\n\n15.20\n\n\n45.j\n\n\n-0x19323L\n\n\n\n\n\n\n-786\n\n\n-21.9\n\n\n9.322e-36j\n\n\n0122L\n\n\n\n\n\n\n080\n\n\n32.3+e18\n\n\n.876j\n\n\n0xDEFABCECBDAECBFBAEl\n\n\n\n\n\n\n-0490\n\n\n-90\n\n\n-.6545+0J\n\n\n535633629843L\n\n\n\n\n\n\n-0x260\n\n\n-32.54e100\n\n\n3e+26J\n\n\n-052318172735L\n\n\n\n\n\n\n0x69\n\n\n70.2-E12\n\n\n4.53e-7j\n\n\n-4721885298529L\n\n\n\n\n\n\n\n\n\n\nStringhe\n\n\n\nLe stringhe in Python sono identificate come un insieme contiguo di caratteri rappresentati tra virgolette (siano esse singole \n'\n o doppie \n\"\n). Le parti di una stringa possono essere acquisite usando l'operatore di slice (\n[]\n e \n[:]\n). Pi\u00f9 stringhe possono essere concatenate tramite l'operatore di concatenamento (\n+\n). Inoltre \u00e8 consentita la ripetizione di una stringa utilizzando l'operatore di ripetizione (\n*\n). Ad esempio, lo script:\n\n\n\n\nstr = 'Hello World!'\n\nprint(str)          # stampa l'intera stringa\nprint(str[0])       # stampa il primo carattere della stringa\nprint(str[2:5])     # stampa dal 3^ al 5^ carattere della stringa\nprint(str[2:])      # stampa la stringa a partire dal 3^ carattere\nprint(str * 2)      # stampa la stringa due volte\nprint(str + \"TEST\") # stampa le stringhe concatenate\n\n\n\n\n\nprodurr\u00e0 il risultato seguente:\n\n\n\n\nHello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST\n\n\n\n\n\n\nListe\n\n\n\nLe liste sono costituiscono il pi\u00f9 versatile tipo di dati di Python. Una lista contiene elementi separati da virgole e racchiusi tra parentesi quadre (\n[]\n). In un certo senso, le liste sono simili agli array di C. Una differenza tra di loro \u00e8 che gli elementi appartenenti a una lista possono essere di tipi diversi. \n\n\n\u00a0 Come per le stringhe, \u00e8 possibile accedere ai valori memorizzati in una lista utilizzando l'operatore di slice (\n[]\n e \n[:]\n). Cos\u00ec pure l'operatore di concatenamento (\n+\n) e quello di ripetizione (\n*\n) possono essere usati, rispettivamente, per concatenare pi\u00f9 liste e per ripetere il contenuto di una stessa lista. Ad esempio, lo script:\n\n\n\n\nlist = ['abcd', 786 , 2.23, 'john', 70.2]\ntiny_list = [123, 'john']\n\nprint(list)              # stampa l'intera lista\nprint(list[0])           # stampa il 1^ elemento della lista\nprint(list[1:3])         # stampa dal 2^ fino al 3^ elemento della lista\nprint(list[2:])          # stampa la lista a partire dal 3^ elemento\nprint(tiny_list * 2)     # stampa la lista due volte\nprint(list + tiny_list)  # stampa le liste concatenate\n\n\n\n\n\nprodurr\u00e0 il risultato seguente:\n\n\n\n\n['abcd', 786, 2.23, 'john', 70.2]\nabcd\n[786, 2.23]\n[2.23, 'john', 70.2]\n[123, 'john', 123, 'john']\n['abcd', 786, 2.23, 'john', 70.2, 123, 'john']\n\n\n\n\n\n\nTuple\n\n\n\nUna tupla \u00e8 un tipo di dati molto simile a una lista. Le principali differenze tra liste e tuple sono: \n\n\n\nle liste sono racchiuse tra parentesi quadre \n[]\n, mentre le tuple sono racchiuse tra parentesi tonde \n()\n\n\ngli elementi di una lista possono essere modificati, mentre gli elementi delle tuple non possono essere modificati (si tratta in sostanza di dati di sola lettura)\n\n\n\nPer comprendere meglio quanto suddetto, forniamo due script. Nel primo, mettiamo in luce le somiglianze tra liste e tuple (unica differenza, l'uso delle parentesi tonde invece delle quadre):\n\n\n\n\ntupla = ('abcd', 786 , 2.23, 'john', 70.2)\ntiny_tupla = (123, 'john')\n\nprint(tupla)                # stampa l'intera tupla\nprint(tupla[0])             # stampa il 1^ elemento della tupla\nprint(tupla[1:3])           # stampa dal 2^ fino al 3^ elemento della tupla\nprint(tupla[2:])            # stampa la tupla a partire dal 3^ elemento\nprint(tiny_tupla * 2)       # stampa la tupla due volte\nprint(tupla + tiny_tupla)   # stampa le tuple concatenate\n\n\n\n\n\nEseguendo tale script, otterremo:\n\n\n\n\n('abcd', 786, 2.23, 'john', 70.2)\nabcd\n(786, 2.23)\n(2.23, 'john', 70.2)\n(123, 'john', 123, 'john')\n('abcd', 786, 2.23, 'john', 70.2, 123, 'john')\n\n\n\n\n\nIl secondo script mette in luce il fatto che le tuple si compongono di elementi di sola lettura:\n\n\n\n\nlist = ['abcd', 786 , 2.23, 'john', 70.2]\ntupla = ('abcd', 786 , 2.23, 'john', 70.2)\n\nlist[2] = 1000     # sintassi valida per le liste\ntupla[2] = 1000    # sintassi invalida per le tuple\n\n\n\n\n\nTale script, quando eseguito, produrr\u00e0 il seguente messaggio di errore:\n\n\n\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\n\n\nDizionari\n\n\n\nI dizionari funzionano come array associativi e sono costituiti da coppie chiave-valore. Una chiave pu\u00f2 essere di qualsiasi tipo, ma di solito sono numeri o stringhe. I valori, pi\u00f9 delle chiavi, possono essere qualsiasi oggetto di Python.\n\n\n\u00a0 I dizionari sono racchiusi tra parentesi graffe \n{}\n, e i suoi valori possono essere assegnati e consultati usando parentesi quadre \n[]\n. Forniamo un esempio:\n\n\n\n\ndict = {}\ndict['one'] = \"This is one\" \ndict[2]     = \"This is two\"\n\ntiny_dict = {'name': 'john','code':6734, 'dept': 'sales'}\n\n\nprint(dict['one'])          # stampa il valore associato alla chiave 'one'\nprint(dict[2])              # stampa il valore associato alla chiave 2\nprint(tiny_dict)            # stampa l'intero dizionario\nprint(tiny_dict.keys())     # stampa l'elenco delle chiavi\nprint(tiny_dict.values())   # stampa l'elenco dei valori\n\n\n\n\n\nTale script produrr\u00e0 il risultato seguente:\n\n\n\n\nThis is one\nThis is two\n{'dept': 'sales', 'code': 6734, 'name': 'john'}\n['dept', 'code', 'name']\n['sales', 6734, 'john']\n\n\n\n\n\nOsserviamo infine che i dizionari non hanno alcun concetto di ordine tra gli elementi. Tuttavia, non \u00e8 corretto dire che i suoi elementi sono disordinati; di fatto, tali elementi sono semplicemente non ordinati.\n\n\n\n\n\n\nConversione dei tipi di dati\n\n\n\nA volte, potrebbe essere necessario eseguire conversioni tra i suddetti tipi predefiniti. Esistono diverse funzioni integrate (dette anche \nbuilt-in\n) per eseguire la conversione da un tipo di dati a un altro. Queste funzioni restituiscono un nuovo oggetto che rappresenta il valore convertito. Forniamo di seguito una lista contenente alcune di queste funzioni integrate:\n\n\n\n\n\n\n\n\n\n\nFunzione\n\n\nDescrizione\n\n\n\n\n\n\n\n\n\n\nint(x)\n\n\nconverte \nx\n in un intero\n\n\n\n\n\n\nstr(x)\n\n\nconverte \nx\n in una stringa\n\n\n\n\n\n\nlist(x)\n\n\nconverte \nx\n in una lista\n\n\n\n\n\n\ntuple(x)\n\n\nconverte \nx\n in una tupla\n\n\n\n\n\n\ndict(x)\n\n\nconverte \nx\n in un dizionario\n\n\n\n\n\n\n\n\n\nInfine, diamo un esempio in cui trasformiamo una stringa in un numero intero:\n\n\n\n\n# esempio di conversione di una stringa in un intero\nx = \"5\"             # x \u00e8 una stringa\ny = 1000            # y \u00e8 un intero\nprint(int(x) + y)   # tramutiamo x in un intero, che poi andiamo a sommare a y\n\n\n\n\n\nTale script stamper\u00e0 il risultato:\n\n\n\n\n1005",
            "title": "Variabili"
        },
        {
            "location": "/variabili/#variabili",
            "text": "Le variabili non sono altro che locazioni di memoria in cui \u00e8 possibile immagazzinare dei dati. Ci\u00f2 significa che quando si crea una variabile, viene riservata una cella memoria. In base al tipo di una variabile, l'interprete decide poi cosa potr\u00e0 essere memorizzato in essa. All'interno di una variabile, in funzione dei diversi tipi di dati, sar\u00e0 quindi possibile memorizzare, ad esempio, numeri interi, decimali o caratteri.",
            "title": "Variabili"
        },
        {
            "location": "/variabili/#assegnare-valori-alle-variabili",
            "text": "Una variabile Python non ha bisogno di una dichiarazione esplicita affinch\u00e9 le venga riservata una locazione di memoria. Infatti, la dichiarazione avviene automaticamente quando, alla variabile, viene assegnato un valore. \n\n\u00a0 Per assegnare un valore a una variabile viene utilizzato il segno di uguaglianza ( = ). L'operando alla sinistra di  =  sar\u00e0 il nome della variabile, mentre l'operando a destra di  =  sar\u00e0 il valore memorizzato nella variabile. Ad esempio:  counter = 100          # numero intero\nmiles   = 1000.1       # floating point\nname    = \"John\"       # stringa\n\nprint(counter)\nprint(miles)\nprint(name)  \nIn questo caso, abbiamo che 100, 1000.1 e \"John\" sono i valori assegnati alle variabili  counter ,  miles  e  name . Il suddetto script produrr\u00e0 il risultato seguente:  100\n1000.1\nJohn",
            "title": "Assegnare valori alle variabili"
        },
        {
            "location": "/variabili/#tipi-di-dati-standard",
            "text": "I dati in memoria possono essere di diversi tipi. Per esempio, l'et\u00e0 di una persona viene immagazzinata come un numero intero, mentre il suo indirizzo \u00e8 memorizzato tramite caratteri alfanumerici. Python possiede una variet\u00e0 di tipi di dati standard, per i quali sono state definite operazioni e metodi che su essi possono essere utilizzati. Nello specifico, esistono 5 tipi di dati standard:  Numeri  Stringhe  Liste  Tuple  Dizionari",
            "title": "Tipi di dati standard"
        },
        {
            "location": "/variabili/#numeri",
            "text": "I tipi di dati numerici vengono creati quando si assegna loro un valore numerico, ad esempio:  var_1 = 1\nvar_2 = 10  \nPython supporta quattro diversi tipi di dati numerici:  int : numeri interi con segno (i.e., positivi o negativi)  float : numeri con virgola mobile (e.g., numeri razionali o reali)  complex : numeri complessi  long : numeri interi lunghi (possono anche essere espressi in base ottale o esadecimale)  \nDi seguito proponiamo alcuni esempi delle sopra elencate tipologie di numeri:     int  float  complex  long      10  0.0  3.14j  51924361L    100  15.20  45.j  -0x19323L    -786  -21.9  9.322e-36j  0122L    080  32.3+e18  .876j  0xDEFABCECBDAECBFBAEl    -0490  -90  -.6545+0J  535633629843L    -0x260  -32.54e100  3e+26J  -052318172735L    0x69  70.2-E12  4.53e-7j  -4721885298529L",
            "title": "Numeri"
        },
        {
            "location": "/variabili/#stringhe",
            "text": "Le stringhe in Python sono identificate come un insieme contiguo di caratteri rappresentati tra virgolette (siano esse singole  '  o doppie  \" ). Le parti di una stringa possono essere acquisite usando l'operatore di slice ( []  e  [:] ). Pi\u00f9 stringhe possono essere concatenate tramite l'operatore di concatenamento ( + ). Inoltre \u00e8 consentita la ripetizione di una stringa utilizzando l'operatore di ripetizione ( * ). Ad esempio, lo script:  str = 'Hello World!'\n\nprint(str)          # stampa l'intera stringa\nprint(str[0])       # stampa il primo carattere della stringa\nprint(str[2:5])     # stampa dal 3^ al 5^ carattere della stringa\nprint(str[2:])      # stampa la stringa a partire dal 3^ carattere\nprint(str * 2)      # stampa la stringa due volte\nprint(str + \"TEST\") # stampa le stringhe concatenate  \nprodurr\u00e0 il risultato seguente:  Hello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST",
            "title": "Stringhe"
        },
        {
            "location": "/variabili/#liste",
            "text": "Le liste sono costituiscono il pi\u00f9 versatile tipo di dati di Python. Una lista contiene elementi separati da virgole e racchiusi tra parentesi quadre ( [] ). In un certo senso, le liste sono simili agli array di C. Una differenza tra di loro \u00e8 che gli elementi appartenenti a una lista possono essere di tipi diversi.  \n\n\u00a0 Come per le stringhe, \u00e8 possibile accedere ai valori memorizzati in una lista utilizzando l'operatore di slice ( []  e  [:] ). Cos\u00ec pure l'operatore di concatenamento ( + ) e quello di ripetizione ( * ) possono essere usati, rispettivamente, per concatenare pi\u00f9 liste e per ripetere il contenuto di una stessa lista. Ad esempio, lo script:  list = ['abcd', 786 , 2.23, 'john', 70.2]\ntiny_list = [123, 'john']\n\nprint(list)              # stampa l'intera lista\nprint(list[0])           # stampa il 1^ elemento della lista\nprint(list[1:3])         # stampa dal 2^ fino al 3^ elemento della lista\nprint(list[2:])          # stampa la lista a partire dal 3^ elemento\nprint(tiny_list * 2)     # stampa la lista due volte\nprint(list + tiny_list)  # stampa le liste concatenate  \nprodurr\u00e0 il risultato seguente:  ['abcd', 786, 2.23, 'john', 70.2]\nabcd\n[786, 2.23]\n[2.23, 'john', 70.2]\n[123, 'john', 123, 'john']\n['abcd', 786, 2.23, 'john', 70.2, 123, 'john']",
            "title": "Liste"
        },
        {
            "location": "/variabili/#tuple",
            "text": "Una tupla \u00e8 un tipo di dati molto simile a una lista. Le principali differenze tra liste e tuple sono:   le liste sono racchiuse tra parentesi quadre  [] , mentre le tuple sono racchiuse tra parentesi tonde  ()  gli elementi di una lista possono essere modificati, mentre gli elementi delle tuple non possono essere modificati (si tratta in sostanza di dati di sola lettura)  \nPer comprendere meglio quanto suddetto, forniamo due script. Nel primo, mettiamo in luce le somiglianze tra liste e tuple (unica differenza, l'uso delle parentesi tonde invece delle quadre):  tupla = ('abcd', 786 , 2.23, 'john', 70.2)\ntiny_tupla = (123, 'john')\n\nprint(tupla)                # stampa l'intera tupla\nprint(tupla[0])             # stampa il 1^ elemento della tupla\nprint(tupla[1:3])           # stampa dal 2^ fino al 3^ elemento della tupla\nprint(tupla[2:])            # stampa la tupla a partire dal 3^ elemento\nprint(tiny_tupla * 2)       # stampa la tupla due volte\nprint(tupla + tiny_tupla)   # stampa le tuple concatenate  \nEseguendo tale script, otterremo:  ('abcd', 786, 2.23, 'john', 70.2)\nabcd\n(786, 2.23)\n(2.23, 'john', 70.2)\n(123, 'john', 123, 'john')\n('abcd', 786, 2.23, 'john', 70.2, 123, 'john')  \nIl secondo script mette in luce il fatto che le tuple si compongono di elementi di sola lettura:  list = ['abcd', 786 , 2.23, 'john', 70.2]\ntupla = ('abcd', 786 , 2.23, 'john', 70.2)\n\nlist[2] = 1000     # sintassi valida per le liste\ntupla[2] = 1000    # sintassi invalida per le tuple  \nTale script, quando eseguito, produrr\u00e0 il seguente messaggio di errore:  TypeError: 'tuple' object does not support item assignment",
            "title": "Tuple"
        },
        {
            "location": "/variabili/#dizionari",
            "text": "I dizionari funzionano come array associativi e sono costituiti da coppie chiave-valore. Una chiave pu\u00f2 essere di qualsiasi tipo, ma di solito sono numeri o stringhe. I valori, pi\u00f9 delle chiavi, possono essere qualsiasi oggetto di Python. \n\n\u00a0 I dizionari sono racchiusi tra parentesi graffe  {} , e i suoi valori possono essere assegnati e consultati usando parentesi quadre  [] . Forniamo un esempio:  dict = {}\ndict['one'] = \"This is one\" \ndict[2]     = \"This is two\"\n\ntiny_dict = {'name': 'john','code':6734, 'dept': 'sales'}\n\n\nprint(dict['one'])          # stampa il valore associato alla chiave 'one'\nprint(dict[2])              # stampa il valore associato alla chiave 2\nprint(tiny_dict)            # stampa l'intero dizionario\nprint(tiny_dict.keys())     # stampa l'elenco delle chiavi\nprint(tiny_dict.values())   # stampa l'elenco dei valori  \nTale script produrr\u00e0 il risultato seguente:  This is one\nThis is two\n{'dept': 'sales', 'code': 6734, 'name': 'john'}\n['dept', 'code', 'name']\n['sales', 6734, 'john']  \nOsserviamo infine che i dizionari non hanno alcun concetto di ordine tra gli elementi. Tuttavia, non \u00e8 corretto dire che i suoi elementi sono disordinati; di fatto, tali elementi sono semplicemente non ordinati.",
            "title": "Dizionari"
        },
        {
            "location": "/variabili/#conversione-dei-tipi-di-dati",
            "text": "A volte, potrebbe essere necessario eseguire conversioni tra i suddetti tipi predefiniti. Esistono diverse funzioni integrate (dette anche  built-in ) per eseguire la conversione da un tipo di dati a un altro. Queste funzioni restituiscono un nuovo oggetto che rappresenta il valore convertito. Forniamo di seguito una lista contenente alcune di queste funzioni integrate:     Funzione  Descrizione      int(x)  converte  x  in un intero    str(x)  converte  x  in una stringa    list(x)  converte  x  in una lista    tuple(x)  converte  x  in una tupla    dict(x)  converte  x  in un dizionario     \nInfine, diamo un esempio in cui trasformiamo una stringa in un numero intero:  # esempio di conversione di una stringa in un intero\nx = \"5\"             # x \u00e8 una stringa\ny = 1000            # y \u00e8 un intero\nprint(int(x) + y)   # tramutiamo x in un intero, che poi andiamo a sommare a y  \nTale script stamper\u00e0 il risultato:  1005",
            "title": "Conversione dei tipi di dati"
        },
        {
            "location": "/operatori/",
            "text": "Operatori\n\n\n\nGli operatori non sono un'esclusiva di Python, in generale tutti i linguaggi di programmazione dispongono di questi costrutti sintattici; \u00e8 possibile definirli come dei simboli attraverso i quali specificare quale regola dovr\u00e0 essere applicata a degli operandi per l'ottenimento di un determinato risultato. \n\n\n\u00a0 Gli operatori possono, per esempio, determinare un'assegnazione (ne sono stati descritti alcuni di questo tipo nelle sezioni precedenti), consentono di effettuare operazioni matematiche a carico degli operandi (e anche in questo caso sono stati gi\u00e0 presentati degli esempi), permettono di effettuare dei confronti tra valori e consentono di incrementare o effettuare decrementi a carico di questi ultimi; tutto dipende dal simbolo utilizzato, dalla tipologia degli operandi impiegati e da alcune regole sintattiche. Di seguito, elencheremo i principali operatori messi a disposizione da Python.\n\n\n\n\n\n\nOperatori di confronto\n\n\n\nGli operatori di confronto producono un risultato sulla base di una comparazione tra operandi; i principali operatori di confronto di Python sono elencati nella seguente tabella, assieme a una breve descrizione e ad un semplice esempio.\n\n\n\n\n\n\n\n\n\n\nOp.\n\n\nDescrizione\n\n\nEsempio\n\n\n\n\n\n\n\n\n\n\n==\n\n\nSe il valore dei due operandi \u00e8 il medesimo il confronto restituisce \nTrue\n, altrimenti \nFalse\n.\n\n\n3 == 2\n restituisce \nFalse\n.\n\n\n\n\n\n\n!=\n\n\nSe il valore dei due operandi non \u00e8 uguale il confronto restituisce \nTrue\n, altrimenti \nFalse\n.\n\n\n3 != 2\n restituisce \nTrue\n.\n\n\n\n\n\n\n>\n\n\nSe il valore alla sinistra del simbolo \u00e8 maggiore di quello alla sua destra restituisce \nTrue\n, altrimenti \nFalse\n.\n\n\n2 > 10\n restituisce \nFalse\n.\n\n\n\n\n\n\n<\n\n\nSe il valore alla sinistra del simbolo \u00e8 inferiore a quello alla sua destra restituisce \nTrue\n, altrimenti \nFalse\n.\n\n\n2 < 10\n restituisce \nTrue\n.\n\n\n\n\n\n\n>=\n\n\nSe il valore alla sinistra dei simboli \u00e8 maggiore o uguale a quello alla sua destra restituisce \nTrue\n, altrimenti \nFalse\n.\n\n\n3 >= 5\n restituisce \nFalse\n.\n\n\n\n\n\n\n<=\n\n\nSe il valore alla sinistra dei simboli \u00e8 minore o uguale a quello alla sua destra restituisce \nTrue\n, altrimenti \nFalse\n.\n\n\n3 <= 5\n restituisce \nTrue\n.\n\n\n\n\n\n\n\n\n\n\nOperatori aritmetici\n\n\n\nGli operatori aritmetici consentono di effettuare calcoli matematici tramite gli operandi; per quanto riguarda questa tipologia in Python abbiamo a disposizione i seguenti operatori:\n\n\n\n\n\n\n\n\n\n\nOp.\n\n\nDescrizione\n\n\nEsempio\n\n\n\n\n\n\n\n\n\n\n+\n\n\nL'operatore di addizione somma i valori degli operandi.\n\n\n3 + 2 = 5\n\n\n\n\n\n\n-\n\n\nL'operatore di sottrazione decrementa l'operando alla sinistra del simbolo di un valore pari a quello dell'operando alla destra di quest'ultimo.\n\n\n3 - 2 = 1\n\n\n\n\n\n\n*\n\n\nL'operatore di moltiplicazione moltiplica l'operando alla sinistra del simbolo un numero di volte pari al valore dell'operando posto alla sua destra.\n\n\n3 * 2 = 6\n\n\n\n\n\n\n/\n\n\nL'operatore di divisione divide l'operando alla sinistra del simbolo sulla base del valore associato all'operando posto alla sua destra.\n\n\n4 / 2 = 2\n\n\n\n\n\n\n%\n\n\nL'operatore modulo restituisce il resto di una divisione.\n\n\n5 % 2 = 1\n\n\n\n\n\n\n**\n\n\nL'operatore esponente eleva a potenza l'operando alla sinistra del simbolo un numero di volte pari al valore dell'operando posto alla sua destra.\n\n\n8**2 = 64\n\n\n\n\n\n\n//\n\n\nL'operatore di arrotondamento restituisce il risultato di una divisione arrotondandolo al valore intero pi\u00f9 prossimo a quello reale.\n\n\n8 // 3 = 2\n\n\n\n\n\n\n\n\n\n\nOperatori di assegnazione\n\n\n\nGli operatori di assegnazione permettono non solo di attribuire dei valori, ma anche di specificare le modalit\u00e0 di tale attribuzione; dato che essi trovano ampio utilizzo quando si opera con le variabili, nella tabella seguente ne verranno utilizzate due come riferimento, \nx = 1\n ed \ny = 2\n:\n\n\n\n\n\n\n\n\n\n\nOp.\n\n\nDescrizione\n\n\nEsempio\n\n\n\n\n\n\n\n\n\n\n=\n\n\nAssegna il valore dell'operando alla sinistra del simbolo a quello alla sua destra.\n\n\nz = x + y\n per cui avremo \nz = 3\n\n\n\n\n\n\n+=\n\n\nAggiunge l'operando di destra a quello di sinistra e assegna il risultato a quest'ultimo.\n\n\nz += x\n equivale a \nz = z + x\n\n\n\n\n\n\n-=\n\n\nSottrae l'operando di destra a quello di sinistra e assegna il risultato a quest'ultimo.\n\n\nz -= x\n equivale a \nz = z - x\n\n\n\n\n\n\n*=\n\n\nMoltiplica l'operando di destra per quello di sinistra e assegna il risultato a quest'ultimo.\n\n\nz *= x\n equivale a \nz = z * x\n\n\n\n\n\n\n/=\n\n\nDivide l'operando di sinistra per il valore di quello di destra e assegna il risultato al primo operando.\n\n\nz /= x\n equivale a \nz = z / x\n\n\n\n\n\n\n%=\n\n\nCalcola il resto dei due operatori e assegna il risultato all'operando di sinistra.\n\n\nz %= x\n equivale a \nz = z % x\n\n\n\n\n\n\n**=\n\n\nCalcola un'elevazione a potenza e assegna il risultato all'operatorendo di sinistra.\n\n\nz **= x\n equivale a \nz = z ** x\n\n\n\n\n\n\n//=\n\n\nRestituisce l'arrotondamento di una divisione tra gli operatori e assegna il risultato all'operatorendo di sinistra.\n\n\nz //= x\n equivale a \nz = z // x\n\n\n\n\n\n\n\n\n\n\nOperatori logici\n\n\n\nGli operatori logici sono dei costrutti sintattici utili al fine di legare due o pi\u00f9 condizioni tra di loro, dove per condizione si intende una qualunque affermazione che pu\u00f2 essere vera o falsa; si ipotizzi per esempio di avere \nx = True\n e \ny = False\n: \n\n\n\n\n\n\n\n\n\n\nOp.\n\n\nDescrizione\n\n\nEsempio\n\n\n\n\n\n\n\n\n\n\nand\n\n\nRestituisce \nTrue\n se entrambi gli operatori sono \nTrue\n, altrimenti restituisce \nFalse\n.\n\n\nx and y\n restituisce \nFalse\n\n\n\n\n\n\nor\n\n\nRestituisce \nTrue\n se almeno uno dei due operatori \u00e8 \nTrue\n, altrimenti restituisce \nFalse\n.\n\n\nx or y\n restituisce \nTrue\n\n\n\n\n\n\nnot\n\n\nRestituisce \nTrue\n se l'operando \u00e8 \nFalse\n, altrimenti restituisce \nTrue\n.\n\n\nnot y\n restituisce \nTrue\n\n\n\n\n\n\n\n\n\n\nOperatori di membership\n\n\n\nGli operatori di membership potranno essere utilizzati per verificare se un determinato elemento fa parte o meno di un insieme, ad esempio una sequenza alfanumerica. Nella tabella seguente sono assegnate le variabili: \nx = \"abc\"\n ed \ny = \"a\"\n.\n\n\n\n\n\n\n\n\n\n\nOp.\n\n\nDescrizione\n\n\nEsempio\n\n\n\n\n\n\n\n\n\n\nin\n\n\nRestituisce \nTrue\n se un valore \u00e8 presente all'interno di un insieme, altrimenti restituisce \nFalse\n.\n\n\ny and x\n restituisce \nTrue\n\n\n\n\n\n\nnot in\n\n\nRestituisce \nTrue\n se un valore non \u00e8 presente all'interno di un insieme, altrimenti restituisce \nFalse\n.\n\n\ny not in x\n restituisce \nFalse",
            "title": "Operatori"
        },
        {
            "location": "/operatori/#operatori",
            "text": "Gli operatori non sono un'esclusiva di Python, in generale tutti i linguaggi di programmazione dispongono di questi costrutti sintattici; \u00e8 possibile definirli come dei simboli attraverso i quali specificare quale regola dovr\u00e0 essere applicata a degli operandi per l'ottenimento di un determinato risultato.  \n\n\u00a0 Gli operatori possono, per esempio, determinare un'assegnazione (ne sono stati descritti alcuni di questo tipo nelle sezioni precedenti), consentono di effettuare operazioni matematiche a carico degli operandi (e anche in questo caso sono stati gi\u00e0 presentati degli esempi), permettono di effettuare dei confronti tra valori e consentono di incrementare o effettuare decrementi a carico di questi ultimi; tutto dipende dal simbolo utilizzato, dalla tipologia degli operandi impiegati e da alcune regole sintattiche. Di seguito, elencheremo i principali operatori messi a disposizione da Python.",
            "title": "Operatori"
        },
        {
            "location": "/operatori/#operatori-di-confronto",
            "text": "Gli operatori di confronto producono un risultato sulla base di una comparazione tra operandi; i principali operatori di confronto di Python sono elencati nella seguente tabella, assieme a una breve descrizione e ad un semplice esempio.     Op.  Descrizione  Esempio      ==  Se il valore dei due operandi \u00e8 il medesimo il confronto restituisce  True , altrimenti  False .  3 == 2  restituisce  False .    !=  Se il valore dei due operandi non \u00e8 uguale il confronto restituisce  True , altrimenti  False .  3 != 2  restituisce  True .    >  Se il valore alla sinistra del simbolo \u00e8 maggiore di quello alla sua destra restituisce  True , altrimenti  False .  2 > 10  restituisce  False .    <  Se il valore alla sinistra del simbolo \u00e8 inferiore a quello alla sua destra restituisce  True , altrimenti  False .  2 < 10  restituisce  True .    >=  Se il valore alla sinistra dei simboli \u00e8 maggiore o uguale a quello alla sua destra restituisce  True , altrimenti  False .  3 >= 5  restituisce  False .    <=  Se il valore alla sinistra dei simboli \u00e8 minore o uguale a quello alla sua destra restituisce  True , altrimenti  False .  3 <= 5  restituisce  True .",
            "title": "Operatori di confronto"
        },
        {
            "location": "/operatori/#operatori-aritmetici",
            "text": "Gli operatori aritmetici consentono di effettuare calcoli matematici tramite gli operandi; per quanto riguarda questa tipologia in Python abbiamo a disposizione i seguenti operatori:     Op.  Descrizione  Esempio      +  L'operatore di addizione somma i valori degli operandi.  3 + 2 = 5    -  L'operatore di sottrazione decrementa l'operando alla sinistra del simbolo di un valore pari a quello dell'operando alla destra di quest'ultimo.  3 - 2 = 1    *  L'operatore di moltiplicazione moltiplica l'operando alla sinistra del simbolo un numero di volte pari al valore dell'operando posto alla sua destra.  3 * 2 = 6    /  L'operatore di divisione divide l'operando alla sinistra del simbolo sulla base del valore associato all'operando posto alla sua destra.  4 / 2 = 2    %  L'operatore modulo restituisce il resto di una divisione.  5 % 2 = 1    **  L'operatore esponente eleva a potenza l'operando alla sinistra del simbolo un numero di volte pari al valore dell'operando posto alla sua destra.  8**2 = 64    //  L'operatore di arrotondamento restituisce il risultato di una divisione arrotondandolo al valore intero pi\u00f9 prossimo a quello reale.  8 // 3 = 2",
            "title": "Operatori aritmetici"
        },
        {
            "location": "/operatori/#operatori-di-assegnazione",
            "text": "Gli operatori di assegnazione permettono non solo di attribuire dei valori, ma anche di specificare le modalit\u00e0 di tale attribuzione; dato che essi trovano ampio utilizzo quando si opera con le variabili, nella tabella seguente ne verranno utilizzate due come riferimento,  x = 1  ed  y = 2 :     Op.  Descrizione  Esempio      =  Assegna il valore dell'operando alla sinistra del simbolo a quello alla sua destra.  z = x + y  per cui avremo  z = 3    +=  Aggiunge l'operando di destra a quello di sinistra e assegna il risultato a quest'ultimo.  z += x  equivale a  z = z + x    -=  Sottrae l'operando di destra a quello di sinistra e assegna il risultato a quest'ultimo.  z -= x  equivale a  z = z - x    *=  Moltiplica l'operando di destra per quello di sinistra e assegna il risultato a quest'ultimo.  z *= x  equivale a  z = z * x    /=  Divide l'operando di sinistra per il valore di quello di destra e assegna il risultato al primo operando.  z /= x  equivale a  z = z / x    %=  Calcola il resto dei due operatori e assegna il risultato all'operando di sinistra.  z %= x  equivale a  z = z % x    **=  Calcola un'elevazione a potenza e assegna il risultato all'operatorendo di sinistra.  z **= x  equivale a  z = z ** x    //=  Restituisce l'arrotondamento di una divisione tra gli operatori e assegna il risultato all'operatorendo di sinistra.  z //= x  equivale a  z = z // x",
            "title": "Operatori di assegnazione"
        },
        {
            "location": "/operatori/#operatori-logici",
            "text": "Gli operatori logici sono dei costrutti sintattici utili al fine di legare due o pi\u00f9 condizioni tra di loro, dove per condizione si intende una qualunque affermazione che pu\u00f2 essere vera o falsa; si ipotizzi per esempio di avere  x = True  e  y = False :      Op.  Descrizione  Esempio      and  Restituisce  True  se entrambi gli operatori sono  True , altrimenti restituisce  False .  x and y  restituisce  False    or  Restituisce  True  se almeno uno dei due operatori \u00e8  True , altrimenti restituisce  False .  x or y  restituisce  True    not  Restituisce  True  se l'operando \u00e8  False , altrimenti restituisce  True .  not y  restituisce  True",
            "title": "Operatori logici"
        },
        {
            "location": "/operatori/#operatori-di-membership",
            "text": "Gli operatori di membership potranno essere utilizzati per verificare se un determinato elemento fa parte o meno di un insieme, ad esempio una sequenza alfanumerica. Nella tabella seguente sono assegnate le variabili:  x = \"abc\"  ed  y = \"a\" .     Op.  Descrizione  Esempio      in  Restituisce  True  se un valore \u00e8 presente all'interno di un insieme, altrimenti restituisce  False .  y and x  restituisce  True    not in  Restituisce  True  se un valore non \u00e8 presente all'interno di un insieme, altrimenti restituisce  False .  y not in x  restituisce  False",
            "title": "Operatori di membership"
        }
    ]
}