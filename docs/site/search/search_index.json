{
    "docs": [
        {
            "location": "/",
            "text": "Introduzione\n\n\n \nLa presente documentazione \u00e8 una guida introduttiva al linguaggio di programmazione Python. I codici relativi a tale guida sono reperibili all'interno del repository \ncoding4math\n.\n\n\n\n\n\n\nPython\n\n\n \nPython \u00e8 un linguaggio di programmazione dinamico orientato agli oggetti utilizzabile per molti tipi di sviluppo software. Offre un forte supporto all'integrazione con altri linguaggi e programmi, \u00e8 fornito di una estesa libreria standard e pu\u00f2 essere imparato in pochi giorni. Non di meno, consente di implementare algoritmi scientifici per la risoluzione di svariati problemi pratici, quali ad esempio:\n\n\n\n\n\n\nRilevazione di guasti all'interno di una rete.\n\n\nControllo di traiettorie.\n\n\nRiconoscimento facciale.\n\n\nClassificazione di utenti.\n\n\n\n\n\nViste le notevoli premesse, vale la pena di iniziare a scandagliare Python, ed \u00e8 proprio questo il fine di questo corso: fornire le basi che consentano, in seguito, di sviluppare capacit\u00e0 professionali nell'uso di questo eccellente linguaggio di programmazione.\n\n\n\n\n\n\nOracoli\n\n\n\nPrima di andare avanti, una doverosa premessa: il mondo informatico \u00e8 una giungla in continuo e rapido mutamento, la qual cosa rende pressoch\u00e9 impossibile la conoscenza di tutti i suoi meandri. Occorrono quindi degli oracoli che possano dare risposta ai nostri dilemmi, il primo dei quali \u00e8: chi sono questi oracoli? Ebbene, ne esistono di diversi, tuttavia i principali risultano essere:\n\n\n    \nGoogle\n: \u00e8 il pi\u00f9 celebre tra i motori di ricerca in Internet, al quale \u00e8 possibile richiedere le pi\u00f9 disparate informazioni che si possano immaginare.\n\n    \nStackexchange\n: \u00e8 una piattaforma informatica cui \u00e8 possibile iscriversi per fare domande e rispondere a quesiti riguardanti diverse discipline, tra le quali: Matematica, Fisica e Chimica.\n\n    \nStackoverflow\n: facente parte del gruppo Stackexchange, \u00e8 una piattaforma di domande e risposte inerenti al solo settore informatico.\n\n\n\nEbbene, tale premessa \u00e8 d'obbligo in quanto molti di voi, nelle lezioni a seguire, potrebbero avere difficolt\u00e0 nel completare alcuni passaggi o nel comprendere alcuni concetti; ciononostante, \u00e8 bene sapere che i suddetti oracoli possono darvi una mano concreta nel risolvere i problemi che incontrerete lungo il tragitto. Il consiglio spassionato \u00e8 quindi quello di consultarli ogni qualvolta vi troviate in una situazione di difficolt\u00e0. Ovviamente, tale consiglio si estende ad altri percorsi formativi che seguirete nelle vostre vite.\n\nPS: il modo migliore per consultare ciascuno degli oracoli sopra elencati, \u00e8 quello di fare uso della lingua inglese; ci\u00f2 richiede pi\u00f9 impegno, ma il risultato finale sar\u00e0 quasi certamente migliore.",
            "title": "Introduzione"
        },
        {
            "location": "/#introduzione",
            "text": "La presente documentazione \u00e8 una guida introduttiva al linguaggio di programmazione Python. I codici relativi a tale guida sono reperibili all'interno del repository  coding4math .",
            "title": "Introduzione"
        },
        {
            "location": "/#python",
            "text": "Python \u00e8 un linguaggio di programmazione dinamico orientato agli oggetti utilizzabile per molti tipi di sviluppo software. Offre un forte supporto all'integrazione con altri linguaggi e programmi, \u00e8 fornito di una estesa libreria standard e pu\u00f2 essere imparato in pochi giorni. Non di meno, consente di implementare algoritmi scientifici per la risoluzione di svariati problemi pratici, quali ad esempio:   Rilevazione di guasti all'interno di una rete.  Controllo di traiettorie.  Riconoscimento facciale.  Classificazione di utenti.   \nViste le notevoli premesse, vale la pena di iniziare a scandagliare Python, ed \u00e8 proprio questo il fine di questo corso: fornire le basi che consentano, in seguito, di sviluppare capacit\u00e0 professionali nell'uso di questo eccellente linguaggio di programmazione.",
            "title": "Python"
        },
        {
            "location": "/#oracoli",
            "text": "Prima di andare avanti, una doverosa premessa: il mondo informatico \u00e8 una giungla in continuo e rapido mutamento, la qual cosa rende pressoch\u00e9 impossibile la conoscenza di tutti i suoi meandri. Occorrono quindi degli oracoli che possano dare risposta ai nostri dilemmi, il primo dei quali \u00e8: chi sono questi oracoli? Ebbene, ne esistono di diversi, tuttavia i principali risultano essere: \n     Google : \u00e8 il pi\u00f9 celebre tra i motori di ricerca in Internet, al quale \u00e8 possibile richiedere le pi\u00f9 disparate informazioni che si possano immaginare. \n     Stackexchange : \u00e8 una piattaforma informatica cui \u00e8 possibile iscriversi per fare domande e rispondere a quesiti riguardanti diverse discipline, tra le quali: Matematica, Fisica e Chimica. \n     Stackoverflow : facente parte del gruppo Stackexchange, \u00e8 una piattaforma di domande e risposte inerenti al solo settore informatico.  \nEbbene, tale premessa \u00e8 d'obbligo in quanto molti di voi, nelle lezioni a seguire, potrebbero avere difficolt\u00e0 nel completare alcuni passaggi o nel comprendere alcuni concetti; ciononostante, \u00e8 bene sapere che i suddetti oracoli possono darvi una mano concreta nel risolvere i problemi che incontrerete lungo il tragitto. Il consiglio spassionato \u00e8 quindi quello di consultarli ogni qualvolta vi troviate in una situazione di difficolt\u00e0. Ovviamente, tale consiglio si estende ad altri percorsi formativi che seguirete nelle vostre vite. \nPS: il modo migliore per consultare ciascuno degli oracoli sopra elencati, \u00e8 quello di fare uso della lingua inglese; ci\u00f2 richiede pi\u00f9 impegno, ma il risultato finale sar\u00e0 quasi certamente migliore.",
            "title": "Oracoli"
        },
        {
            "location": "/set-up-mac/",
            "text": "Set-up (Mac OS High Sierra)\n\n\n\nIn questa sezione vedremo come installare Python 3 sul sistema operativo Mac OS High Sierra, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python. \n\n\n\n\n\n\nVerificare la versione\n\n\n\nAnche se Python 2 \u00e8 installato di default sui computer Apple, Python 3 non lo \u00e8. Potrete averne conferma eseguendo nel \nTerminal\n il seguente comando\n1\n:\n\n\n\n\n~ > python --version\nPython 2.7.10\n\n\n\n\n\nPer verificare se Python 3 \u00e8 gi\u00e0 installato, potete provare a eseguire \npython3 --version\n. Molto probabilmente otterrete un messaggio di errore; anche qualora abbiate una versione di Python 3, l'obiettivo \u00e8 installare quella pi\u00f9 recente.\n\n\n\n\n\n\nInstallare Xcode e Homebrew\n\n\n\nPer installare Python 3 faremo uso del package manager \nHomebrew\n. Quest'ultimo dipende dal software \nXcode\n distribuito gratuitamente da Apple. Abbiamo quindi bisogno di integrare Xcode nel nostro sistema, e possiamo farlo tramite la seguente istruzione da riga di comando:\n\n\n\n\n~ > xcode-select --install\n\n\n\n\n\nDurante il processo di installazione, accettare tutte le condizioni proposte\n2\n. \nIl passo successivo consiste nell'installare Homebrew\n3\n:\n\n\n\n\n~ > /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\n\n\n\nPer verificare la corretta installazione di Homebrew, eseguire infine il comando seguente:\n\n\n\n\n~ > brew doctor\nYour system is ready to brew.\n\n\n\n\n\n\nInstallare Python 3\n\n\n\nPer installare l'ultima versione di Python 3, dare la seguente istruzione:\n\n\n\n\n~ > brew install python3\n\n\n\n\n\nA questo punto, potete verificare quale versione di Python 3 \u00e8 stata resa disponibile:\n\n\n\n\n~ > python3 --version\nPython 3.7.0\n\n\n\n\n\nPer aprire la shell di Python 3 dalla linea di comando, baster\u00e0 semplicemente scrivere \npython3\n e dare invio:\n\n\n\n\n~ > python3\nPython 3.7.0 (default, Jun 29 2018, 20:13:13)\n[Clang 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n\n\n\n\n\nPer uscire dalla shell di Python 3, bisogner\u00e0 dare il comando \nexit()\n.\nSi potr\u00e0 inoltre ancora sfruttare Python 2, che era installato di default, tramite l'istruzione \npython\n:\n\n\n\n\n~ > python\nPython 2.7.15 (default, Jun 17 2018, 12:46:58)\n[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n\n\n\n\n\n\nCreare l'ambiente virtuale\n\n\n\n\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella \nvirtualenv/\n all'interno della home directory. Creiamo quindi tale cartella:\n\n\n\n\n~ > mkdir ~/virtualenvs\n\n\n\n\n\nMediante l'ausilio del modulo \nvenv\n incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo \nmyvenv\n:\n\n\n\n\n~ > python3 -m venv ~/virtualenvs/myvenv\n\n\n\n\n\nAvendo utilizzato il termine \npython3\n, il nostro ambiente virtuale riconosce che quando digitiamo \npython\n per assegnare un comando, intendiamo utilizzare Python 3, non Python 2. Per attivare l'ambiente virtuale appena inizializzato, sar\u00e0 sufficiente eseguire:\n\n\n\n\n~ > source ~/virtualenvs/myvenv/bin/activate\n(myvenv) ~ >\n\n\n\n\n\nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando \npip freeze\n per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale. \n\n\nPer disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente la finestra del Terminal, oppure si pu\u00f2 dare la seguente istruzione: \n\n\n\n\n(myvenv) ~ > deactivate\n\u279c ~\n\n\n\n\n\n\nInstallare Sublime Text\n\n\n\nPer poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE (Integrated Development Environment) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8 \nSublime Text\n, il cui file \ndmg\n pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice esecuzione. \n\n\n\n\n\n\nEseguire uno script\n\n\n\nNel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato \nmain.py\n, il quale stamper\u00e0 sulla linea di comando la scritta \nHello World.\n. \n\n\n\n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n            \nStep 1\n\n            \nAprire l'IDE Sublime Text e selezionare \nFile > Open...\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 2\n\n            \nScegliere la cartella \n~/virtualenvs/myvenv\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 3\n\n            \nSelezionare \nmyvenv > New Folder\n e aggiungere la cartella \nsrc\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 4\n\n            \nSelezionare \nsrc > New File\n e aggiungere il file \nmain.py\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 5\n\n            \nIn \nmain.py\n scrivere il codice \nprint('Hello World.')\n e salvare\n\n        \n\n    \n\n  \n\n  \n\n    \n\n    \nPrevious\n\n  \n\n  \n\n    \n\n    \nNext\n\n  \n\n\n\n\nAdesso che abbiamo a nostra disposizione il nostro primo script Python, potremo infine eseguirlo tramite la seguente successione di comandi:\n\n\n\n\n~ > source ~/virtualenvs/myvenv/bin/activate\n(myvenv) ~ > cd virtualenvs/myvenv/src\n(myvenv) src > python main.py\nHello World.\n\n\n\n\n\nSi noti che: col comando \nsource ~/virtualenvs/myvenv/bin/activate\n si attiva l'ambiente virtuale; col comando \ncd virtualenvs/myvenv/src\n si entra nella cartella \nsrc\n dove \u00e8 ubicato lo script \nmain.py\n; infine col comando \npython main.py\n si esegue il predetto script che, come possiamo vedere, stampa sulla linea di comando il messaggio \nHello World.\n.\n\n\n\n\n1. Si noti che il simbolo \n~\n indica la home directory del sistema operativo, solitamente ubicata nel path \n/Users/nomeutente\n. Inoltre la dicitura \ncartella >\n indica che ci troviamo nella directory \ncartella\n del sistema operativo.\n\n\n2. La installazione di Xcode potrebbe richiedere da pochi minuti ad alcune ore.\n\n\n3. Il comando di installazione di Homebrew \u00e8 reperibile anche presso il sito ufficiale di Homebrew.",
            "title": "Set-up (Mac OS High Sierra)"
        },
        {
            "location": "/set-up-mac/#set-up-mac-os-high-sierra",
            "text": "In questa sezione vedremo come installare Python 3 sul sistema operativo Mac OS High Sierra, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python.",
            "title": "Set-up (Mac OS High Sierra)"
        },
        {
            "location": "/set-up-mac/#verificare-la-versione",
            "text": "Anche se Python 2 \u00e8 installato di default sui computer Apple, Python 3 non lo \u00e8. Potrete averne conferma eseguendo nel  Terminal  il seguente comando 1 :  ~ > python --version\nPython 2.7.10  \nPer verificare se Python 3 \u00e8 gi\u00e0 installato, potete provare a eseguire  python3 --version . Molto probabilmente otterrete un messaggio di errore; anche qualora abbiate una versione di Python 3, l'obiettivo \u00e8 installare quella pi\u00f9 recente.",
            "title": "Verificare la versione"
        },
        {
            "location": "/set-up-mac/#installare-xcode-e-homebrew",
            "text": "Per installare Python 3 faremo uso del package manager  Homebrew . Quest'ultimo dipende dal software  Xcode  distribuito gratuitamente da Apple. Abbiamo quindi bisogno di integrare Xcode nel nostro sistema, e possiamo farlo tramite la seguente istruzione da riga di comando:  ~ > xcode-select --install  \nDurante il processo di installazione, accettare tutte le condizioni proposte 2 . \nIl passo successivo consiste nell'installare Homebrew 3 :  ~ > /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"  \nPer verificare la corretta installazione di Homebrew, eseguire infine il comando seguente:  ~ > brew doctor\nYour system is ready to brew.",
            "title": "Installare Xcode e Homebrew"
        },
        {
            "location": "/set-up-mac/#installare-python-3",
            "text": "Per installare l'ultima versione di Python 3, dare la seguente istruzione:  ~ > brew install python3  \nA questo punto, potete verificare quale versione di Python 3 \u00e8 stata resa disponibile:  ~ > python3 --version\nPython 3.7.0  \nPer aprire la shell di Python 3 dalla linea di comando, baster\u00e0 semplicemente scrivere  python3  e dare invio:  ~ > python3\nPython 3.7.0 (default, Jun 29 2018, 20:13:13)\n[Clang 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>  \nPer uscire dalla shell di Python 3, bisogner\u00e0 dare il comando  exit() .\nSi potr\u00e0 inoltre ancora sfruttare Python 2, che era installato di default, tramite l'istruzione  python :  ~ > python\nPython 2.7.15 (default, Jun 17 2018, 12:46:58)\n[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>",
            "title": "Installare Python 3"
        },
        {
            "location": "/set-up-mac/#creare-lambiente-virtuale",
            "text": "\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella  virtualenv/  all'interno della home directory. Creiamo quindi tale cartella:  ~ > mkdir ~/virtualenvs  \nMediante l'ausilio del modulo  venv  incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo  myvenv :  ~ > python3 -m venv ~/virtualenvs/myvenv  \nAvendo utilizzato il termine  python3 , il nostro ambiente virtuale riconosce che quando digitiamo  python  per assegnare un comando, intendiamo utilizzare Python 3, non Python 2. Per attivare l'ambiente virtuale appena inizializzato, sar\u00e0 sufficiente eseguire:  ~ > source ~/virtualenvs/myvenv/bin/activate\n(myvenv) ~ >  \nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando  pip freeze  per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale.  \nPer disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente la finestra del Terminal, oppure si pu\u00f2 dare la seguente istruzione:   (myvenv) ~ > deactivate\n\u279c ~",
            "title": "Creare l'ambiente virtuale"
        },
        {
            "location": "/set-up-mac/#installare-sublime-text",
            "text": "Per poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE (Integrated Development Environment) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8  Sublime Text , il cui file  dmg  pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice esecuzione.",
            "title": "Installare Sublime Text"
        },
        {
            "location": "/set-up-mac/#eseguire-uno-script",
            "text": "Nel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato  main.py , il quale stamper\u00e0 sulla linea di comando la scritta  Hello World. .",
            "title": "Eseguire uno script"
        },
        {
            "location": "/set-up-windows/",
            "text": "Set-up (Windows 10)\n\n\n\nIn questa sezione vedremo come installare Python 3 sul sistema operativo Windows 10, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python. \n\n\n\n\n\n\nInstallare Python 3\n\n\n\nIl primo passo \u00e8 recarsi presso il \nsito ufficiale\n e scaricare il file eseguibile (estensione \nexe\n) necessario all'installazione di Python 3 (al tempo in cui scrivo, siamo alla versione 3.7.0). Terminato il download, lanciare il file eseguibile e, prima di procedere con l'installazione, selezionare la voce \nAdd Python 3.7 to PATH\n (ci\u00f2 consentir\u00e0 al command prompt di riconoscere il comando \npython\n)\n1\n. A questo punto, cliccare su \nInstall Now\n e seguire la procedura guidata che ci consentir\u00e0 di terminare l'installazione di Python 3.\nRicapitoliamo schematicamente quanto appena detto attraverso il seguente slider.\n\n\n\n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n            \nStep 1\n\n            \nVisitare la pagina di Download di Python\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 2\n\n            \nCliccare su \nDownload Python 3.7.0\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 3\n\n            \nLanciare l'eseguibile scaricato\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 4\n\n            \nSelezionare la voce \nAdd Python 3.7 to PATH\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 5\n\n            \nCliccare \nInstall Now\n e seguire la procedura guidata per terminare l'installazione\n\n        \n\n    \n\n  \n\n  \n\n    \n\n    \nPrevious\n\n  \n\n  \n\n    \n\n    \nNext\n\n  \n\n\n\n\n\n\n\n\n\nCreare l'ambiente virtuale\n\n\n\n\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella \nvirtualenvs\n all'interno della cartella \nhome\n, quest'ultima ubicata nel percorso \nC:\\Users\\nomeutente\n e generalmente indicata con il simbolo \n~\n. Detto questo, dopo aver aperto \nCommand Prompt\n, possiamo creare la cartella \nvirtualenvs\n ed entrare in essa eseguendo nel prompt i comandi seguenti:\n2\n\n\n\n\n\n~ > mkdir virtualenvs\n~ > cd virtualenvs\nvirtualenvs >\n\n\n\n\n\nSi noti che col comando \nmkdir virtualenvs\n creiamo la cartella \nvirtualenvs\n (di fatto \nmkdir\n \u00e8 un diminutivo di \nmake directory\n, ossia \ncrea la cartella\n), mentre col comando \ncd virtualenvs\n entriamo all'interno della cartella \nvirtualenvs\n (in tal caso \ncd\n \u00e8 l'acronimo di \nchange directory\n, ovvero \nentra nella cartella\n).\n\n\u00a0 A questo punto, mediante l'ausilio del modulo \nvenv\n incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo \nmyvenv\n:\n\n\n\n\nvirtualenvs > python -m venv myvenv\n\n\n\n\n\nIl comando di cui sopra consente di generare una serie di cartelle e file, di modo che il nostro file system presenti, allo stato attuale, la struttura seguente:\n\n\n\n\n~\n|__virtualenvs\n   |__myvenv\n      |__Include\n      |__Lib\n      |__Scripts\n      |__pyvenv.cfg\n\n\n\n\n\nPossiamo adesso entrare nella cartella \nmyvenv\n e attivare l'ambiente virtuale tramite i comandi:\n\n\n\n\nvirtualenvs > cd myvenv\nmyvenv > Scripts\\activate\n(myvenv) myvenv >\n\n\n\n\n\nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando \npip freeze\n per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale.\n\n\u00a0 Per disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente il command prompt, oppure si pu\u00f2 dare la seguente istruzione: \n\n\n\n\n(myvenv) myvenv > deactivate\nmyvenv >\n\n\n\n\nNel seguente slider vi \u00e8 infine una rappresentazione schematica dei passi sopra illustrati.\n\n\n\n\n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n            \nStep 1\n\n            \nDigitare \ncmd\n sulla barra di ricerca e aprire \nCommand Prompt\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 2\n\n            \nSiete adesso nella cartella \nC:\\Users\\nomeutente\n, detta cartella \nhome\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 3\n\n            \nCreare la cartella \nvirtualenvs\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 4\n\n            \nEntrare nella cartella \nvirtualenvs\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 5\n\n            \nCreare l'ambiente virtuale \nmyvenv\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 6\n\n            \nEntrare nella cartella \nmyvenv\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 7\n\n            \nAttivare l'ambiente virtuale\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 8\n\n            \nDisattivare l'ambiente virtuale\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 9\n\n            \nVisualizzare il contenuto dell'ambiente virtuale appena creato\n\n        \n\n    \n\n  \n\n  \n\n    \n\n    \nPrevious\n\n  \n\n  \n\n    \n\n    \nNext\n\n  \n\n\n\n\n\n\n\n\n\nInstallare Sublime Text\n\n\n\nPer poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE (\nIntegrated Development Environment\n, anche detto \neditor di testo\n) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8 \nSublime Text\n, il cui file \nexe\n pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice procedura guidata. \n\n\n\n\n\n\nEseguire uno script\n\n\n\nNel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato \nmain.py\n, il quale stamper\u00e0 sulla linea di comando la scritta \nHello World.\n. \n\n\n\n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n            \nStep 1\n\n            \nAprire l'IDE Sublime Text e selezionare \nFile > Open Folder...\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 2\n\n            \nScegliere la cartella \n~\\virtualenvs\\myvenv\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 3\n\n            \nSelezionare \nmyvenv > New Folder\n e aggiungere la cartella \nsrc\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 4\n\n            \nSelezionare \nsrc > New File\n e aggiungere il file \nmain.py\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 5\n\n            \nIn \nmain.py\n scrivere il codice \nprint('Hello World.')\n e salvare\n\n        \n\n    \n\n  \n\n  \n\n    \n\n    \nPrevious\n\n  \n\n  \n\n    \n\n    \nNext\n\n  \n\n\n\n\nAdesso che abbiamo a nostra disposizione il nostro primo script Python, potremo infine eseguirlo nel command prompt tramite la seguente successione di comandi:\n\n\n\n\n~ > cd virtualenvs\\myvenv\\\nmyvenv > Scripts\\activate\n(myvenv) myvenv > cd src\n(myvenv) src > python main.py\nHello World.\n\n\n\n\n\nSi noti che: col comando \ncd virtualenvs\\myvenv\\\n si entra nella cartella \nmyvenv\n; col comando \nScripts\\activate\n si attiva l'ambiente virtuale; col comando \ncd src\n si entra nella cartella \nsrc\n dove \u00e8 ubicato lo script \nmain.py\n; infine col comando \npython main.py\n si esegue il predetto script che, come possiamo vedere, stampa sulla linea di comando il messaggio \nHello World.\n.\n\n\n\n\n1. Se non si seleziona subito la voce \nAdd Python 3.7 to PATH\n, bisogner\u00e0 aggiungere manualmente, all'interno della variabile d'ambiente PATH, il percorso che punta all'interprete Python 3.7.\n\n\n\n2. Si noti che, all'interno del prompt, la dicitura \nfolder >\n indica che ci troviamo nella cartella \nfolder\n del sistema operativo.",
            "title": "Set-up (Windows 10)"
        },
        {
            "location": "/set-up-windows/#set-up-windows-10",
            "text": "In questa sezione vedremo come installare Python 3 sul sistema operativo Windows 10, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python.",
            "title": "Set-up (Windows 10)"
        },
        {
            "location": "/set-up-windows/#installare-python-3",
            "text": "Il primo passo \u00e8 recarsi presso il  sito ufficiale  e scaricare il file eseguibile (estensione  exe ) necessario all'installazione di Python 3 (al tempo in cui scrivo, siamo alla versione 3.7.0). Terminato il download, lanciare il file eseguibile e, prima di procedere con l'installazione, selezionare la voce  Add Python 3.7 to PATH  (ci\u00f2 consentir\u00e0 al command prompt di riconoscere il comando  python ) 1 . A questo punto, cliccare su  Install Now  e seguire la procedura guidata che ci consentir\u00e0 di terminare l'installazione di Python 3.\nRicapitoliamo schematicamente quanto appena detto attraverso il seguente slider.",
            "title": "Installare Python 3"
        },
        {
            "location": "/set-up-windows/#creare-lambiente-virtuale",
            "text": "\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella  virtualenvs  all'interno della cartella  home , quest'ultima ubicata nel percorso  C:\\Users\\nomeutente  e generalmente indicata con il simbolo  ~ . Detto questo, dopo aver aperto  Command Prompt , possiamo creare la cartella  virtualenvs  ed entrare in essa eseguendo nel prompt i comandi seguenti: 2   ~ > mkdir virtualenvs\n~ > cd virtualenvs\nvirtualenvs >  \nSi noti che col comando  mkdir virtualenvs  creiamo la cartella  virtualenvs  (di fatto  mkdir  \u00e8 un diminutivo di  make directory , ossia  crea la cartella ), mentre col comando  cd virtualenvs  entriamo all'interno della cartella  virtualenvs  (in tal caso  cd  \u00e8 l'acronimo di  change directory , ovvero  entra nella cartella ). \n\u00a0 A questo punto, mediante l'ausilio del modulo  venv  incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo  myvenv :  virtualenvs > python -m venv myvenv  \nIl comando di cui sopra consente di generare una serie di cartelle e file, di modo che il nostro file system presenti, allo stato attuale, la struttura seguente:  ~\n|__virtualenvs\n   |__myvenv\n      |__Include\n      |__Lib\n      |__Scripts\n      |__pyvenv.cfg  \nPossiamo adesso entrare nella cartella  myvenv  e attivare l'ambiente virtuale tramite i comandi:  virtualenvs > cd myvenv\nmyvenv > Scripts\\activate\n(myvenv) myvenv >  \nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando  pip freeze  per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale. \n\u00a0 Per disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente il command prompt, oppure si pu\u00f2 dare la seguente istruzione:   (myvenv) myvenv > deactivate\nmyvenv >  Nel seguente slider vi \u00e8 infine una rappresentazione schematica dei passi sopra illustrati.",
            "title": "Creare l'ambiente virtuale"
        },
        {
            "location": "/set-up-windows/#installare-sublime-text",
            "text": "Per poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE ( Integrated Development Environment , anche detto  editor di testo ) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8  Sublime Text , il cui file  exe  pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice procedura guidata.",
            "title": "Installare Sublime Text"
        },
        {
            "location": "/set-up-windows/#eseguire-uno-script",
            "text": "Nel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato  main.py , il quale stamper\u00e0 sulla linea di comando la scritta  Hello World. .",
            "title": "Eseguire uno script"
        },
        {
            "location": "/sintassi-di-base/",
            "text": "Sintassi di base\n\n\nIn questa sezione forniremo alcune regole sintattiche di base del linguaggio Python, le quali ci serviranno per scrivere in modo corretto il nostro codice.\n\n\n\n\nIdentificatori\n\n\n\nUn identificatore \u00e8 il nome con cui sono rappresentate costanti, variabili, metodi, classi e moduli. Un identificatore pu\u00f2 essere costituito da una lettera maiuscola, minuscola o dal simbolo underscore seguito da altri caratteri, che a loro volta possono essere una qualsiasi combinazione di lettere maiuscole e minuscole, underscore e cifre. I caratteri minuscoli corrispondono alle lettere minuscole dell\u2019alfabeto dalla a alla z, compreso il simbolo underscore, mentre i caratteri maiuscoli corrispondono alle lettere maiuscole dell\u2019alfabeto dalla A alla Z e le cifre da 0 al 9. Il numero di caratteri che compongono il nome non \u00e8 limitato.\n\n\u00a0 Gli identificatori non possono contenere spazi vuoti o caratteri di punteggiatura, quali ad esempio @, $ e %. Python \u00e8 un linguaggio \ncase sensitive\n, ci\u00f2 vuol dire che \nvar\n e \nVar\n sono due identificatori diversi. Vi sono inoltre alcune convenzioni di denominazione che vengono seguite all'interno della comunit\u00e0 di programmatori Python:\n\n\n\ngli identificatori delle classi cominciano con una lettera maiuscola, mentre gli altri identificatori cominciano con una lettera maiuscola;\n\n\nse un identificatore si compone di pi\u00f9 parole, queste vengono separate da un underscore (es. \nvar_1\n).\n\n\n\nInoltre, l'utilizzo degli underscore all'inizio o alla fine di un identificatore, \u00e8 soggetto ad alcune convenzioni e regole che sono esposte nella tabella seguente.\n\n\n\n\n\n\n\n\n\n\n\nTipo\n\n\nEsempio\n\n\nSignificato\n\n\n\n\n\n\n\n\n\n\nSingle leading underscore\n\n\n_var\n\n\nConvenzione indicante che l'identificatore \u00e8 destinato ad essere privato.\n\n\n\n\n\n\nSingle trailing underscore\n\n\nvar_\n\n\nConvenzione utilizzata per evitare conflitti con le parole chiave di Python.\n\n\n\n\n\n\nDouble leading underscore\n\n\n__var\n\n\nUtilizzata all'interno delle classi per innescare il cosiddetto \nname mangling\n.\n\n\n\n\n\n\nDouble leading and trailing underscore\n\n\n__var__\n\n\nUsato come identificatore di metodi speciali definiti dal linguaggio Python. Questo tipo di identificatore non va usato per rappresentare le vostre variabili.\n\n\n\n\n\n\nSingle underscore\n\n\n_\n\n\nTalvolta usato come identificatore per variabili temporanee o insignificanti\n\n\n\n\n\n\n\n\n\n\nParole chiave\n\n\n\nLa lista seguente mostra le parole chiave di Python. Queste sono parole riservate che non possono essere usate come identificatori. Tutte le parole chiave di Python contengono solo lettere minuscole.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParole chiave\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nand\n\n\nassert\n\n\nbreak\n\n\nclass\n\n\ncontinue\n\n\n\n\n\n\ndef\n\n\ndel\n\n\nelif\n\n\nelse\n\n\nexcept\n\n\n\n\n\n\nexec\n\n\nfinally\n\n\nfor\n\n\nfrom\n\n\nglobal\n\n\n\n\n\n\nif\n\n\nimport\n\n\nin\n\n\nis\n\n\nlambda\n\n\n\n\n\n\nnot\n\n\nor\n\n\npass\n\n\nprint\n\n\nraise\n\n\n\n\n\n\nreturn\n\n\ntry\n\n\nwhile\n\n\nwith\n\n\nyield\n\n\n\n\n\n\n\n\n\n\nIndentazione del codice\n\n\n\nUna caratteristica essenziale del linguaggio di programmazione Python \u00e8 il metodo che utilizza per delimitare i blocchi di programma, e cio\u00e8 l\u2019indentazione del codice. Per indentazione del codice, si intende quella tecnica utilizzata nella programmazione attraverso la quale si evidenziano dei blocchi di programma con l\u2019inserimento di una certa quantit\u00e0 di spazio vuoto all\u2019inizio di una riga di testo, allo scopo di aumentarne la leggibilit\u00e0. Cos\u00ec ogni riga viene indentata di un certo numero di spazi che dipende dalla sua posizione all\u2019interno della struttura logica del programma. L'indentazione inizia un blocco e la rimozione dell'indentazione lo termina. Un esempio schematico di indentazione \u00e8 fornito dalla figura seguente, nella quale \u00e8 possibile riconoscere i diversi blocchi di codice sulla base del loro livello di indentazione.\n\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\n\nDunque Python, invece di usare parentesi o parole chiave, usa l\u2019indentazione stessa per indicare i blocchi nidificati; a tal proposito si possono usare sia una tabulazione, sia un numero arbitrario di spazi bianchi, ma lo standard Python prevede 4 spazi bianchi. Nella fattispecie, si aggiungono 4 nuovi spazi se si vuole incominciare un nuovo blocco, e si rimuovono 4 spazi se si vuole terminare un blocco esistente.\n\n\u00a0 La cosa da ricordare \u00e8 che l'indentazione in Python non \u00e8 facoltativa ma \u00e8 una regola, nel senso che se si omette l\u2019indentazione  allora l\u2019interprete ci restituir\u00e0 un messaggio di errore. A titolo di esempio, si consideri il seguente codice, correttamente indentato, che rappresenta una classica struttura condizionale:\n\n\n\n\nif True:\n    print('True')\nelse:\n    print('False')\n\n\n\n\n\nEbbene, se proviamo a eliminare l'indentazione dal suddetto codice, ovvero se scriviamo:\n\n\n\n\nif True:\nprint('True')\nelse:\nprint('False')\n\n\n\n\n\nallora l'interprete Python restituir\u00e0 il messaggio di errore: \n\n\n\n\nIndentationError: expected an indented block\n\n\n\n\n\n\nIstruzioni multi-linea\n\n\n\nLe istruzioni in Python tipicamente terminano con l'andata a capo. Python, tuttavia, consente l'uso del carattere di continuazione (\n\\\n) per indicare che l'istruzione continua alla linea successiva. Ad esempio:\n\n\n\n\ntotal = item_one + \\\n        item_two + \\\n        item_three\n\n\n\n\n\nLe istruzioni contenute all'interno delle parentesi \n()\n, \n[]\n o \n{}\n non necessitano dell'utilizzo del carattere di continuazione. Ad esempio:\n\n\n\n\ndays = ['Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday']\n\n\n\n\n\n\nVirgolette\n\n\n\nPython accetta singole (\n'\n), doppie (\n\"\n) e triple (\n'''\n o \n\"\"\"\n) virgolette per indicare i valori letterali di una stringa, purch\u00e9 lo stesso tipo di virgolette inizi e termini la stringa.\n\n\u00a0 Le triple virgolette sono usate per estendere il contenuto della stringa su pi\u00f9 righe. Ad esempio, tutte le seguenti istruzioni sono consentite:\n\n\n\n\nparola = 'parola'\nfrase = \"Questa \u00e8 una frase.\"\nparagrafo = \"\"\"Questo \u00e8 un paragrafo. Esso si\n               compone di pi\u00f9 righe e frasi.\"\"\"\n\n\n\n\n\n\nCommenti\n\n\n\nIl cancelletto (\n#\n), quando non si trova all'interno di una stringa letterale, definisce l'inizio un commento. Tutti i caratteri dopo il simbolo \n#\n, e fino alla fine della linea fisica, faranno parte del commento e l'interprete Python li ignorer\u00e0. Si consideri ad esempio lo script:\n\n\n\n\n# Primo commento\nprint('Hello, Python!') # secondo commento\n\n\n\n\nTale script, quando eseguito, produrr\u00e0 il risultato seguente:\n\n\nHello, Python!\n\n\n\n\n\nI commenti che si estendono su pi\u00f9 righe saranno delimitati dalle triple virgolette \n\"\"\"\n:\n\n\n\n\n\"\"\"\nQuesto \u00e8 un commento che si dilunga\nsu pi\u00f9 righe.\n\"\"\"\nprint('Hello, Python!')",
            "title": "Sintassi di base"
        },
        {
            "location": "/sintassi-di-base/#sintassi-di-base",
            "text": "In questa sezione forniremo alcune regole sintattiche di base del linguaggio Python, le quali ci serviranno per scrivere in modo corretto il nostro codice.",
            "title": "Sintassi di base"
        },
        {
            "location": "/sintassi-di-base/#identificatori",
            "text": "Un identificatore \u00e8 il nome con cui sono rappresentate costanti, variabili, metodi, classi e moduli. Un identificatore pu\u00f2 essere costituito da una lettera maiuscola, minuscola o dal simbolo underscore seguito da altri caratteri, che a loro volta possono essere una qualsiasi combinazione di lettere maiuscole e minuscole, underscore e cifre. I caratteri minuscoli corrispondono alle lettere minuscole dell\u2019alfabeto dalla a alla z, compreso il simbolo underscore, mentre i caratteri maiuscoli corrispondono alle lettere maiuscole dell\u2019alfabeto dalla A alla Z e le cifre da 0 al 9. Il numero di caratteri che compongono il nome non \u00e8 limitato. \n\u00a0 Gli identificatori non possono contenere spazi vuoti o caratteri di punteggiatura, quali ad esempio @, $ e %. Python \u00e8 un linguaggio  case sensitive , ci\u00f2 vuol dire che  var  e  Var  sono due identificatori diversi. Vi sono inoltre alcune convenzioni di denominazione che vengono seguite all'interno della comunit\u00e0 di programmatori Python:  gli identificatori delle classi cominciano con una lettera maiuscola, mentre gli altri identificatori cominciano con una lettera maiuscola;  se un identificatore si compone di pi\u00f9 parole, queste vengono separate da un underscore (es.  var_1 ).  \nInoltre, l'utilizzo degli underscore all'inizio o alla fine di un identificatore, \u00e8 soggetto ad alcune convenzioni e regole che sono esposte nella tabella seguente.      Tipo  Esempio  Significato      Single leading underscore  _var  Convenzione indicante che l'identificatore \u00e8 destinato ad essere privato.    Single trailing underscore  var_  Convenzione utilizzata per evitare conflitti con le parole chiave di Python.    Double leading underscore  __var  Utilizzata all'interno delle classi per innescare il cosiddetto  name mangling .    Double leading and trailing underscore  __var__  Usato come identificatore di metodi speciali definiti dal linguaggio Python. Questo tipo di identificatore non va usato per rappresentare le vostre variabili.    Single underscore  _  Talvolta usato come identificatore per variabili temporanee o insignificanti",
            "title": "Identificatori"
        },
        {
            "location": "/sintassi-di-base/#parole-chiave",
            "text": "La lista seguente mostra le parole chiave di Python. Queste sono parole riservate che non possono essere usate come identificatori. Tutte le parole chiave di Python contengono solo lettere minuscole.        Parole chiave        and  assert  break  class  continue    def  del  elif  else  except    exec  finally  for  from  global    if  import  in  is  lambda    not  or  pass  print  raise    return  try  while  with  yield",
            "title": "Parole chiave"
        },
        {
            "location": "/sintassi-di-base/#indentazione-del-codice",
            "text": "Una caratteristica essenziale del linguaggio di programmazione Python \u00e8 il metodo che utilizza per delimitare i blocchi di programma, e cio\u00e8 l\u2019indentazione del codice. Per indentazione del codice, si intende quella tecnica utilizzata nella programmazione attraverso la quale si evidenziano dei blocchi di programma con l\u2019inserimento di una certa quantit\u00e0 di spazio vuoto all\u2019inizio di una riga di testo, allo scopo di aumentarne la leggibilit\u00e0. Cos\u00ec ogni riga viene indentata di un certo numero di spazi che dipende dalla sua posizione all\u2019interno della struttura logica del programma. L'indentazione inizia un blocco e la rimozione dell'indentazione lo termina. Un esempio schematico di indentazione \u00e8 fornito dalla figura seguente, nella quale \u00e8 possibile riconoscere i diversi blocchi di codice sulla base del loro livello di indentazione. \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \n\nDunque Python, invece di usare parentesi o parole chiave, usa l\u2019indentazione stessa per indicare i blocchi nidificati; a tal proposito si possono usare sia una tabulazione, sia un numero arbitrario di spazi bianchi, ma lo standard Python prevede 4 spazi bianchi. Nella fattispecie, si aggiungono 4 nuovi spazi se si vuole incominciare un nuovo blocco, e si rimuovono 4 spazi se si vuole terminare un blocco esistente. \n\u00a0 La cosa da ricordare \u00e8 che l'indentazione in Python non \u00e8 facoltativa ma \u00e8 una regola, nel senso che se si omette l\u2019indentazione  allora l\u2019interprete ci restituir\u00e0 un messaggio di errore. A titolo di esempio, si consideri il seguente codice, correttamente indentato, che rappresenta una classica struttura condizionale:  if True:\n    print('True')\nelse:\n    print('False')  \nEbbene, se proviamo a eliminare l'indentazione dal suddetto codice, ovvero se scriviamo:  if True:\nprint('True')\nelse:\nprint('False')  \nallora l'interprete Python restituir\u00e0 il messaggio di errore:   IndentationError: expected an indented block",
            "title": "Indentazione del codice"
        },
        {
            "location": "/sintassi-di-base/#istruzioni-multi-linea",
            "text": "Le istruzioni in Python tipicamente terminano con l'andata a capo. Python, tuttavia, consente l'uso del carattere di continuazione ( \\ ) per indicare che l'istruzione continua alla linea successiva. Ad esempio:  total = item_one + \\\n        item_two + \\\n        item_three  \nLe istruzioni contenute all'interno delle parentesi  () ,  []  o  {}  non necessitano dell'utilizzo del carattere di continuazione. Ad esempio:  days = ['Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday']",
            "title": "Istruzioni multi-linea"
        },
        {
            "location": "/sintassi-di-base/#virgolette",
            "text": "Python accetta singole ( ' ), doppie ( \" ) e triple ( '''  o  \"\"\" ) virgolette per indicare i valori letterali di una stringa, purch\u00e9 lo stesso tipo di virgolette inizi e termini la stringa. \n\u00a0 Le triple virgolette sono usate per estendere il contenuto della stringa su pi\u00f9 righe. Ad esempio, tutte le seguenti istruzioni sono consentite:  parola = 'parola'\nfrase = \"Questa \u00e8 una frase.\"\nparagrafo = \"\"\"Questo \u00e8 un paragrafo. Esso si\n               compone di pi\u00f9 righe e frasi.\"\"\"",
            "title": "Virgolette"
        },
        {
            "location": "/sintassi-di-base/#commenti",
            "text": "Il cancelletto ( # ), quando non si trova all'interno di una stringa letterale, definisce l'inizio un commento. Tutti i caratteri dopo il simbolo  # , e fino alla fine della linea fisica, faranno parte del commento e l'interprete Python li ignorer\u00e0. Si consideri ad esempio lo script:  # Primo commento\nprint('Hello, Python!') # secondo commento  Tale script, quando eseguito, produrr\u00e0 il risultato seguente:  Hello, Python!  \nI commenti che si estendono su pi\u00f9 righe saranno delimitati dalle triple virgolette  \"\"\" :  \"\"\"\nQuesto \u00e8 un commento che si dilunga\nsu pi\u00f9 righe.\n\"\"\"\nprint('Hello, Python!')",
            "title": "Commenti"
        }
    ]
}