{
    "docs": [
        {
            "location": "/",
            "text": "Introduzione\n\n\n \nLa presente documentazione \u00e8 una guida introduttiva al linguaggio di programmazione Python. I codici relativi a tale guida sono reperibili all'interno del repository \ncoding4math\n.\n\n\n\n\n\n\nPython\n\n\n \nPython \u00e8 un linguaggio di programmazione dinamico orientato agli oggetti utilizzabile per molti tipi di sviluppo software. Offre un forte supporto all'integrazione con altri linguaggi e programmi, \u00e8 fornito di una estesa libreria standard e pu\u00f2 essere imparato in pochi giorni. Non di meno, consente di implementare algoritmi scientifici per la risoluzione di svariati problemi pratici, quali ad esempio:\n\n\n\n\n\n\nRilevazione di guasti all'interno di una rete.\n\n\nControllo di traiettorie.\n\n\nRiconoscimento facciale.\n\n\nClassificazione di utenti.\n\n\n\n\n\nViste le notevoli premesse, vale la pena di iniziare a scandagliare Python, ed \u00e8 proprio questo il fine di questo corso: fornire le basi che consentano, in seguito, di sviluppare capacit\u00e0 professionali nell'uso di questo eccellente linguaggio di programmazione.\n\n\n\n\n\n\nOracoli\n\n\n\nPrima di andare avanti, una doverosa premessa: il mondo informatico \u00e8 una giungla in continuo e rapido mutamento, la qual cosa rende pressoch\u00e9 impossibile la conoscenza di tutti i suoi meandri. Occorrono quindi degli oracoli che possano dare risposta ai nostri dilemmi, il primo dei quali \u00e8: chi sono questi oracoli? Ebbene, ne esistono di diversi, tuttavia i principali risultano essere:\n\n\n    \nGoogle\n: \u00e8 il pi\u00f9 celebre tra i motori di ricerca in Internet, al quale \u00e8 possibile richiedere le pi\u00f9 disparate informazioni che si possano immaginare.\n\n    \nStackexchange\n: \u00e8 una piattaforma informatica cui \u00e8 possibile iscriversi per fare domande e rispondere a quesiti riguardanti diverse discipline, tra le quali: Matematica, Fisica e Chimica.\n\n    \nStackoverflow\n: facente parte del gruppo Stackexchange, \u00e8 una piattaforma di domande e risposte inerenti al solo settore informatico.\n\n\n\nEbbene, tale premessa \u00e8 d'obbligo in quanto molti di voi, nelle lezioni a seguire, potrebbero avere difficolt\u00e0 nel completare alcuni passaggi o nel comprendere alcuni concetti; ciononostante, \u00e8 bene sapere che i suddetti oracoli possono darvi una mano concreta nel risolvere i problemi che incontrerete lungo il tragitto. Il consiglio spassionato \u00e8 quindi quello di consultarli ogni qualvolta vi troviate in una situazione di difficolt\u00e0. Ovviamente, tale consiglio si estende ad altri percorsi formativi che seguirete nelle vostre vite.\n\nPS: il modo migliore per consultare ciascuno degli oracoli sopra elencati, \u00e8 quello di fare uso della lingua inglese; ci\u00f2 richiede pi\u00f9 impegno, ma il risultato finale sar\u00e0 quasi certamente migliore.",
            "title": "Introduzione"
        },
        {
            "location": "/#introduzione",
            "text": "La presente documentazione \u00e8 una guida introduttiva al linguaggio di programmazione Python. I codici relativi a tale guida sono reperibili all'interno del repository  coding4math .",
            "title": "Introduzione"
        },
        {
            "location": "/#python",
            "text": "Python \u00e8 un linguaggio di programmazione dinamico orientato agli oggetti utilizzabile per molti tipi di sviluppo software. Offre un forte supporto all'integrazione con altri linguaggi e programmi, \u00e8 fornito di una estesa libreria standard e pu\u00f2 essere imparato in pochi giorni. Non di meno, consente di implementare algoritmi scientifici per la risoluzione di svariati problemi pratici, quali ad esempio:   Rilevazione di guasti all'interno di una rete.  Controllo di traiettorie.  Riconoscimento facciale.  Classificazione di utenti.   \nViste le notevoli premesse, vale la pena di iniziare a scandagliare Python, ed \u00e8 proprio questo il fine di questo corso: fornire le basi che consentano, in seguito, di sviluppare capacit\u00e0 professionali nell'uso di questo eccellente linguaggio di programmazione.",
            "title": "Python"
        },
        {
            "location": "/#oracoli",
            "text": "Prima di andare avanti, una doverosa premessa: il mondo informatico \u00e8 una giungla in continuo e rapido mutamento, la qual cosa rende pressoch\u00e9 impossibile la conoscenza di tutti i suoi meandri. Occorrono quindi degli oracoli che possano dare risposta ai nostri dilemmi, il primo dei quali \u00e8: chi sono questi oracoli? Ebbene, ne esistono di diversi, tuttavia i principali risultano essere: \n     Google : \u00e8 il pi\u00f9 celebre tra i motori di ricerca in Internet, al quale \u00e8 possibile richiedere le pi\u00f9 disparate informazioni che si possano immaginare. \n     Stackexchange : \u00e8 una piattaforma informatica cui \u00e8 possibile iscriversi per fare domande e rispondere a quesiti riguardanti diverse discipline, tra le quali: Matematica, Fisica e Chimica. \n     Stackoverflow : facente parte del gruppo Stackexchange, \u00e8 una piattaforma di domande e risposte inerenti al solo settore informatico.  \nEbbene, tale premessa \u00e8 d'obbligo in quanto molti di voi, nelle lezioni a seguire, potrebbero avere difficolt\u00e0 nel completare alcuni passaggi o nel comprendere alcuni concetti; ciononostante, \u00e8 bene sapere che i suddetti oracoli possono darvi una mano concreta nel risolvere i problemi che incontrerete lungo il tragitto. Il consiglio spassionato \u00e8 quindi quello di consultarli ogni qualvolta vi troviate in una situazione di difficolt\u00e0. Ovviamente, tale consiglio si estende ad altri percorsi formativi che seguirete nelle vostre vite. \nPS: il modo migliore per consultare ciascuno degli oracoli sopra elencati, \u00e8 quello di fare uso della lingua inglese; ci\u00f2 richiede pi\u00f9 impegno, ma il risultato finale sar\u00e0 quasi certamente migliore.",
            "title": "Oracoli"
        },
        {
            "location": "/set-up-mac/",
            "text": "Set-up (Mac OS High Sierra)\n\n\n\nIn questa sezione vedremo come installare Python 3 sul sistema operativo Mac OS High Sierra, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python. \n\n\n\n\n\n\nVerificare la versione\n\n\n\nAnche se Python 2 \u00e8 installato di default sui computer Apple, Python 3 non lo \u00e8. Potrete averne conferma eseguendo nel \nTerminal\n il seguente comando\n1\n:\n\n\n\n\n\u279c ~  python --version\nPython 2.7.10\n\n\n\n\n\nPer verificare se Python 3 \u00e8 gi\u00e0 installato, potete provare a eseguire \npython3 --version\n. Molto probabilmente otterrete un messaggio di errore; anche qualora abbiate una versione di Python 3, l'obiettivo \u00e8 installare quella pi\u00f9 recente.\n\n\n\n\n\n\nInstallare Xcode e Homebrew\n\n\n\nPer installare Python 3 faremo uso del package manager \nHomebrew\n. Quest'ultimo dipende dal software \nXcode\n distribuito gratuitamente da Apple. Abbiamo quindi bisogno di integrare Xcode nel nostro sistema, e possiamo farlo tramite la seguente istruzione da riga di comando:\n\n\n\n\n\u279c ~  xcode-select --install\n\n\n\n\n\nDurante il processo di installazione, accettare tutte le condizioni proposte\n2\n. \nIl passo successivo consiste nell'installare Homebrew\n3\n:\n\n\n\n\n\u279c ~  /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\n\n\n\nPer verificare la corretta installazione di Homebrew, eseguire infine il comando seguente:\n\n\n\n\n\u279c ~  brew doctor\nYour system is ready to brew.\n\n\n\n\n\n\nInstallare Python 3\n\n\n\nPer installare l'ultima versione di Python 3, dare la seguente istruzione:\n\n\n\n\n\u279c ~  brew install python3\n\n\n\n\n\nA questo punto, potete verificare quale versione di Python 3 \u00e8 stata resa disponibile:\n\n\n\n\n\u279c ~  python3 --version\nPython 3.7.0\n\n\n\n\n\nPer aprire la shell di Python 3 dalla linea di comando, baster\u00e0 semplicemente scrivere \npython3\n e dare invio:\n\n\n\n\n\u279c ~  python3\nPython 3.7.0 (default, Jun 29 2018, 20:13:13)\n[Clang 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n\n\n\n\n\nPer uscire dalla shell di Python 3, bisogner\u00e0 dare il comando \nexit()\n.\nSi potr\u00e0 inoltre ancora sfruttare Python 2, che era installato di default, tramite l'istruzione \npython\n:\n\n\n\n\n\u279c ~  python\nPython 2.7.15 (default, Jun 17 2018, 12:46:58)\n[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n\n\n\n\n\n\nCreare l'ambiente virtuale\n\n\n\n\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella \nvirtualenv/\n all'interno della home directory. Creiamo quindi tale cartella:\n\n\n\n\n\u279c ~  mkdir ~/virtualenvs\n\n\n\n\n\nMediante l'ausilio del modulo \nvenv\n incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo \nmyvenv\n:\n\n\n\n\n\u279c ~  python3 -m venv ~/virtualenvs/myvenv\n\n\n\n\n\nAvendo utilizzato il termine \npython3\n, il nostro ambiente virtuale riconosce che quando digitiamo \npython\n per assegnare un comando, intendiamo utilizzare Python 3, non Python 2. Per attivare l'ambiente virtuale appena inizializzato, sar\u00e0 sufficiente eseguire:\n\n\n\n\n\u279c ~  source ~/virtualenvs/myvenv/bin/activate\n(myvenv) \u279c ~\n\n\n\n\n\nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando \npip freeze\n per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale. \n\n\nPer disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente la finestra del Terminal, oppure si pu\u00f2 dare la seguente istruzione: \n\n\n\n\n(myvenv) \u279c ~  deactivate\n\u279c ~\n\n\n\n\n\n\nInstallare Sublime Text\n\n\n\nPer poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE (Integrated Development Environment) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8 \nSublime Text\n, il cui file \ndmg\n pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice esecuzione. \n\n\n\n\n\n\nEseguire uno script\n\n\n\nNel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato \nmain.py\n, il quale stamper\u00e0 sulla linea di comando la scritta \nHello World.\n. \n\n\n\n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n            \nStep 1\n\n            \nAprire l'IDE Sublime Text e selezionare \nFile > Open...\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 2\n\n            \nScegliere la cartella \n~/virtualenvs/myvenv\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 3\n\n            \nSelezionare \nmyvenv > New Folder\n e aggiungere la cartella \nsrc\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 4\n\n            \nSelezionare \nsrc > New File\n e aggiungere il file \nmain.py\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 5\n\n            \nIn \nmain.py\n scrivere il codice \nprint('Hello World.')\n e salvare\n\n        \n\n    \n\n  \n\n  \n\n    \n\n    \nPrevious\n\n  \n\n  \n\n    \n\n    \nNext\n\n  \n\n\n\n\nAdesso che abbiamo a nostra disposizione il nostro primo script Python, potremo infine eseguirlo tramite la seguente successione di comandi:\n\n\n\n\n\u279c ~  source ~/virtualenvs/myvenv/bin/activate\n(myvenv) \u279c ~  cd virtualenvs/myvenv/src\n(myvenv) \u279c src  python main.py\nHello World.\n\n\n\n\n\nSi noti che: col comando \nsource ~/virtualenvs/myvenv/bin/activate\n si attiva l'ambiente virtuale; col comando \ncd virtualenvs/myvenv/src\n si entra nella cartella \nsrc\n dove \u00e8 ubicato lo script \nmain.py\n; infine col comando \npython main.py\n si esegue il predetto script che, come possiamo vedere, stampa sulla linea di comando il messaggio \nHello World.\n.\n\n\n\n\n1. Si noti che i simboli \n\u279c ~\n indicano che ci troviamo nella home directory del sistema operativo.\n\n\n2. La installazione di Xcode potrebbe richiedere da pochi minuti ad alcune ore.\n\n\n3. Il comando di installazione di Homebrew \u00e8 reperibile anche presso il sito ufficiale di Homebrew.",
            "title": "Set-up (Mac OS High Sierra)"
        },
        {
            "location": "/set-up-mac/#set-up-mac-os-high-sierra",
            "text": "In questa sezione vedremo come installare Python 3 sul sistema operativo Mac OS High Sierra, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python.",
            "title": "Set-up (Mac OS High Sierra)"
        },
        {
            "location": "/set-up-mac/#verificare-la-versione",
            "text": "Anche se Python 2 \u00e8 installato di default sui computer Apple, Python 3 non lo \u00e8. Potrete averne conferma eseguendo nel  Terminal  il seguente comando 1 :  \u279c ~  python --version\nPython 2.7.10  \nPer verificare se Python 3 \u00e8 gi\u00e0 installato, potete provare a eseguire  python3 --version . Molto probabilmente otterrete un messaggio di errore; anche qualora abbiate una versione di Python 3, l'obiettivo \u00e8 installare quella pi\u00f9 recente.",
            "title": "Verificare la versione"
        },
        {
            "location": "/set-up-mac/#installare-xcode-e-homebrew",
            "text": "Per installare Python 3 faremo uso del package manager  Homebrew . Quest'ultimo dipende dal software  Xcode  distribuito gratuitamente da Apple. Abbiamo quindi bisogno di integrare Xcode nel nostro sistema, e possiamo farlo tramite la seguente istruzione da riga di comando:  \u279c ~  xcode-select --install  \nDurante il processo di installazione, accettare tutte le condizioni proposte 2 . \nIl passo successivo consiste nell'installare Homebrew 3 :  \u279c ~  /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"  \nPer verificare la corretta installazione di Homebrew, eseguire infine il comando seguente:  \u279c ~  brew doctor\nYour system is ready to brew.",
            "title": "Installare Xcode e Homebrew"
        },
        {
            "location": "/set-up-mac/#installare-python-3",
            "text": "Per installare l'ultima versione di Python 3, dare la seguente istruzione:  \u279c ~  brew install python3  \nA questo punto, potete verificare quale versione di Python 3 \u00e8 stata resa disponibile:  \u279c ~  python3 --version\nPython 3.7.0  \nPer aprire la shell di Python 3 dalla linea di comando, baster\u00e0 semplicemente scrivere  python3  e dare invio:  \u279c ~  python3\nPython 3.7.0 (default, Jun 29 2018, 20:13:13)\n[Clang 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>  \nPer uscire dalla shell di Python 3, bisogner\u00e0 dare il comando  exit() .\nSi potr\u00e0 inoltre ancora sfruttare Python 2, che era installato di default, tramite l'istruzione  python :  \u279c ~  python\nPython 2.7.15 (default, Jun 17 2018, 12:46:58)\n[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>",
            "title": "Installare Python 3"
        },
        {
            "location": "/set-up-mac/#creare-lambiente-virtuale",
            "text": "\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella  virtualenv/  all'interno della home directory. Creiamo quindi tale cartella:  \u279c ~  mkdir ~/virtualenvs  \nMediante l'ausilio del modulo  venv  incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo  myvenv :  \u279c ~  python3 -m venv ~/virtualenvs/myvenv  \nAvendo utilizzato il termine  python3 , il nostro ambiente virtuale riconosce che quando digitiamo  python  per assegnare un comando, intendiamo utilizzare Python 3, non Python 2. Per attivare l'ambiente virtuale appena inizializzato, sar\u00e0 sufficiente eseguire:  \u279c ~  source ~/virtualenvs/myvenv/bin/activate\n(myvenv) \u279c ~  \nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando  pip freeze  per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale.  \nPer disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente la finestra del Terminal, oppure si pu\u00f2 dare la seguente istruzione:   (myvenv) \u279c ~  deactivate\n\u279c ~",
            "title": "Creare l'ambiente virtuale"
        },
        {
            "location": "/set-up-mac/#installare-sublime-text",
            "text": "Per poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE (Integrated Development Environment) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8  Sublime Text , il cui file  dmg  pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice esecuzione.",
            "title": "Installare Sublime Text"
        },
        {
            "location": "/set-up-mac/#eseguire-uno-script",
            "text": "Nel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato  main.py , il quale stamper\u00e0 sulla linea di comando la scritta  Hello World. .",
            "title": "Eseguire uno script"
        },
        {
            "location": "/set-up-windows/",
            "text": "Set-up (Windows 10)\n\n\n\nIn questa sezione vedremo come installare Python 3 sul sistema operativo Windows 10, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python. \n\n\n\n\n\n\nConfigurare PowerShell\n\n\n\nIl primo passo \u00e8 eseguire come amministratore l'interfaccia a riga di comando denominata \nPowershell\n. Per far ci\u00f2, sar\u00e0 sufficiente cliccare col tasto destro l'icona di Powershell e selezionare l'opzione \nEsegui come Amministratore\n. A questo punto, per recarsi nella home directory, eseguire il comando\n1\n: \n\n\n\n\n\u279c system32  cd ~\n\u279c ~\n\n\n\n\n\nNel seguente slider vi \u00e8 una schematizzazione di quanto suddetto (si consiglia di evidenziare il testo se non visibile).\n\n\n\n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n            \nStep 1\n\n            \nNella barra di ricerca digitare \nPowerShell\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 2\n\n            \nCliccare col tasto destro sull'icona \nPowershell\n e selezionare \nEsegui come Amministratore\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 3\n\n            \nSelezionare \nS\u00ec\n nella successiva finestra\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 4\n\n            \nEseguire il comando \ncd ~\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 5\n\n            \nSiamo ora nella cartella home, cio\u00e8 \nC:\\Users\\nomeutente\n\n        \n\n    \n\n  \n\n  \n\n    \n\n    \nPrevious\n\n  \n\n  \n\n    \n\n    \nNext\n\n  \n\n\n\n\nOccorre adesso configurare PowerShell con permessi di esecuzione che consentano, all'utente corrente, il download di programmi fidati. A tal fine, settiamo la polizza di esecuzione dell'utente corrente a \nRemoteSigned\n. Per far ci\u00f2, eseguiamo il comando: \n\n\n\n\n\u279c ~  Set-ExecutionPolicy -Scope CurrentUser\n\n\n\n\n\nPowerShell ci chieder\u00e0 di fornire una polizza di esecuzione che, nel nostro caso, \u00e8 la seguente:\n\n\n\n\n\u279c ~  RemoteSigned\n\n\n\n\n\nUna volta premuto invio, ci verr\u00e0 chiesto se vogliamo cambiare la polizza di esecuzione. Digitare la lettera \ny\n per \nyes\n, consentendo cos\u00ec ai cambiamenti di avere effetto. Possiamo adesso procedere col download dei programmi che ci serviranno per mettere a punto il nostro ambiente di programmazione Python.\n\n\n\n\n\n\nInstallare Chocolatey\n\n\n\nPer installare Python 3 faremo uso del package manager \nChocolatey\n. Per scaricare Chocolatey, creiamo un oggetto Webclient che chiamiamo \n$script\n:\n\n\n\n\n\u279c ~  $script = New-Object Net.WebClient\n\n\n\n\n\nSfruttiamo poi tale oggetto per scaricare Chocolatey attraverso il comando:\n\n\n\n\n\u279c ~  $script.DownloadString(\"https://chocolatey.org/install.ps1\")\n\n\n\n\n\nGiunti qui, possiamo installare Chocolatey tramite l'istruzione:\n\n\n\n\n\u279c ~  iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex\n\n\n\n\n\nInfine, possiamo aggiornare Chocolatey in ogni istante futuro eseguendo dalla PowerShell il comando:\n\n\n\n\n\u279c ~  choco upgrade chocolatey\n\n\n\n\n\n\nInstallare Python 3\n\n\n\nAdesso che abbiamo a disposizione Chocolatey, possiamo installare Python 3 semplicemente eseguendo l'istruzione:\n\n\n\n\n\u279c ~  choco install install -y python3\n\n\n\n\n\nUna volta terminato il processo di installazione, per verificare l'effettiva presenza di Python 3 nel nostro sistema operativo, chiudere e riaprire Powershell come Amministratore, poi digitare:\n\n\n\n\n\u279c ~  python -V\n\n\n\n\n\nDovremmo a questo punto ottenere un output recante la versione di Python installata sul sistema operativo:\n\n\n\n\nOutput\nPython 3.5.1\n\n\n\n\n\nAssieme a Python, sar\u00e0 installato anche pip, il quale consente la gestione dei cosiddetti moduli Python. Ci assicuriamo che pip sia aggiornato alla versione pi\u00f9 recente tramite l'istruzione:\n\n\n\n\n\u279c ~  python -m pip install --upgrade pip\n\n\n\n\n\nAdesso che Python 3 \u00e8 installato e pip \u00e8 aggiornato, possiamo mettere a punto un ambiente virtuale per i nostri futuri progetti.\n\n\n\n\n\n\nCreare l'ambiente virtuale\n\n\n\n\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella \nvirtualenv\n all'interno della home directory. Creiamo quindi tale cartella:\n\n\n\n\n\u279c cartella  cd ~\n\u279c ~  mkdir virtualenvs\n\u279c ~  cd .\\virtualenvs\\\n\u279c virtualenvs\n\n\n\n\n\nMediante l'ausilio del modulo \nvenv\n incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo \nmyvenv\n:\n\n\n\n\n\u279c virtualenvs  python -m venv myvenv\n\u279c virtualenvs  cd .\\myvenv\\\n\u279c myvenv\n\n\n\n\n\nPer attivare l'ambiente virtuale appena inizializzato, sar\u00e0 sufficiente eseguire:\n\n\n\n\n\u279c myvenv  Scripts\\activate\n(myvenv) \u279c myvenv\n\n\n\n\n\nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando \npip freeze\n per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale. \n\n\nPer disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente la finestra di PowerShell, oppure si pu\u00f2 dare la seguente istruzione: \n\n\n\n\n(myvenv) \u279c myvenv  deactivate\n\u279c myvenv\n\n\n\n\n\n\nInstallare Sublime Text\n\n\n\nPer poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE (Integrated Development Environment) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8 \nSublime Text\n, il cui file \nexe\n pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice esecuzione. \n\n\n\n\n\n\nEseguire uno script\n\n\n\nNel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato \nmain.py\n, il quale stamper\u00e0 sulla linea di comando la scritta \nHello World.\n. \n\n\n\n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \n\n      \n\n        \n\n            \nStep 1\n\n            \nAprire l'IDE Sublime Text e selezionare \nFile > Open Folder...\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 2\n\n            \nScegliere la cartella \n~\\virtualenvs\\myvenv\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 3\n\n            \nSelezionare \nmyvenv > New Folder\n e aggiungere la cartella \nsrc\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 4\n\n            \nSelezionare \nsrc > New File\n e aggiungere il file \nmain.py\n\n        \n\n    \n\n    \n\n      \n\n        \n\n            \nStep 5\n\n            \nIn \nmain.py\n scrivere il codice \nprint('Hello World.')\n e salvare\n\n        \n\n    \n\n  \n\n  \n\n    \n\n    \nPrevious\n\n  \n\n  \n\n    \n\n    \nNext\n\n  \n\n\n\n\nAdesso che abbiamo a nostra disposizione il nostro primo script Python, potremo infine eseguirlo tramite la seguente successione di comandi:\n\n\n\n\n\u279c cartella  cd ~\n\u279c ~  cd .\\virtualenvs\\myvenv\\\n\u279c myvenv  Scripts\\activate\n(myvenv) \u279c myvenv  cd .\\src\\\n(myvenv) \u279c src  python main.py\nHello World.\n\n\n\n\n\nSi noti che: col comando \ncd ~\n ci rechiamo presso la home directory; col comando \ncd .\\virtualenvs\\myvenv\\\n si entra nella cartella \nmyvenv\n; col comando \nScripts\\activate\n si attiva l'ambiente virtuale; col comando \ncd .\\src\\\n si entra nella cartella \nsrc\n dove \u00e8 ubicato lo script \nmain.py\n; infine col comando \npython main.py\n si esegue il predetto script che, come possiamo vedere, stampa sulla linea di comando il messaggio \nHello World.\n.\n\n\n\n\n1. Si noti che la scrittura \n\u279c cartella\n indica che ci troviamo nella directory chiamata \ncartella\n, mentre il simbolo \n~\n indica la home directory del sistema operativo, solitamente ubicata in \nC:\\Users\\nomeutente\n.",
            "title": "Set-up (Windows 10)"
        },
        {
            "location": "/set-up-windows/#set-up-windows-10",
            "text": "In questa sezione vedremo come installare Python 3 sul sistema operativo Windows 10, come creare un ambiente virtuale e infine come eseguire al suo interno un semplice script Python.",
            "title": "Set-up (Windows 10)"
        },
        {
            "location": "/set-up-windows/#configurare-powershell",
            "text": "Il primo passo \u00e8 eseguire come amministratore l'interfaccia a riga di comando denominata  Powershell . Per far ci\u00f2, sar\u00e0 sufficiente cliccare col tasto destro l'icona di Powershell e selezionare l'opzione  Esegui come Amministratore . A questo punto, per recarsi nella home directory, eseguire il comando 1 :   \u279c system32  cd ~\n\u279c ~  \nNel seguente slider vi \u00e8 una schematizzazione di quanto suddetto (si consiglia di evidenziare il testo se non visibile).",
            "title": "Configurare PowerShell"
        },
        {
            "location": "/set-up-windows/#installare-chocolatey",
            "text": "Per installare Python 3 faremo uso del package manager  Chocolatey . Per scaricare Chocolatey, creiamo un oggetto Webclient che chiamiamo  $script :  \u279c ~  $script = New-Object Net.WebClient  \nSfruttiamo poi tale oggetto per scaricare Chocolatey attraverso il comando:  \u279c ~  $script.DownloadString(\"https://chocolatey.org/install.ps1\")  \nGiunti qui, possiamo installare Chocolatey tramite l'istruzione:  \u279c ~  iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex  \nInfine, possiamo aggiornare Chocolatey in ogni istante futuro eseguendo dalla PowerShell il comando:  \u279c ~  choco upgrade chocolatey",
            "title": "Installare Chocolatey"
        },
        {
            "location": "/set-up-windows/#installare-python-3",
            "text": "Adesso che abbiamo a disposizione Chocolatey, possiamo installare Python 3 semplicemente eseguendo l'istruzione:  \u279c ~  choco install install -y python3  \nUna volta terminato il processo di installazione, per verificare l'effettiva presenza di Python 3 nel nostro sistema operativo, chiudere e riaprire Powershell come Amministratore, poi digitare:  \u279c ~  python -V  \nDovremmo a questo punto ottenere un output recante la versione di Python installata sul sistema operativo:  Output\nPython 3.5.1  \nAssieme a Python, sar\u00e0 installato anche pip, il quale consente la gestione dei cosiddetti moduli Python. Ci assicuriamo che pip sia aggiornato alla versione pi\u00f9 recente tramite l'istruzione:  \u279c ~  python -m pip install --upgrade pip  \nAdesso che Python 3 \u00e8 installato e pip \u00e8 aggiornato, possiamo mettere a punto un ambiente virtuale per i nostri futuri progetti.",
            "title": "Installare Python 3"
        },
        {
            "location": "/set-up-windows/#creare-lambiente-virtuale",
            "text": "\u00c8 pratica comune utilizzare ambienti virtuali per qualsivoglia progetto Python. Un ambiente virtuale consente di creare uno spazio isolato di modo che si possa, ad esempio, utilizzare Python 2 e Python 3 per due diversi progetti ubicati nello stesso computer. \u00c8 inoltre una buona norma quella di mantenere tutti i vostri ambienti virtuali in un'unica cartella, ad esempio nella cartella  virtualenv  all'interno della home directory. Creiamo quindi tale cartella:  \u279c cartella  cd ~\n\u279c ~  mkdir virtualenvs\n\u279c ~  cd .\\virtualenvs\\\n\u279c virtualenvs  \nMediante l'ausilio del modulo  venv  incorporato in Python, possiamo inizializzare il nostro ambiente virtuale, che chiameremo  myvenv :  \u279c virtualenvs  python -m venv myvenv\n\u279c virtualenvs  cd .\\myvenv\\\n\u279c myvenv  \nPer attivare l'ambiente virtuale appena inizializzato, sar\u00e0 sufficiente eseguire:  \u279c myvenv  Scripts\\activate\n(myvenv) \u279c myvenv  \nVal la pena notare che quando l'ambiente virtuale \u00e8 attivo, sar\u00e0 possibile vedere il suo nome tra parentesi all'inizio della riga di comando. I moduli che andrete a installare saranno ora disponibili solo all'interno di questo specifico ambiente virtuale. Potrete utilizzare il comando  pip freeze  per vedere la lista di tutti i moduli installati all'interno dell'ambiente virtuale.  \nPer disattivare l'ambiente virtuale in esecuzione, si pu\u00f2 chiudere direttamente la finestra di PowerShell, oppure si pu\u00f2 dare la seguente istruzione:   (myvenv) \u279c myvenv  deactivate\n\u279c myvenv",
            "title": "Creare l'ambiente virtuale"
        },
        {
            "location": "/set-up-windows/#installare-sublime-text",
            "text": "Per poter cominciare a programmare efficacemente in Python, occorre adesso fare affidamento a un IDE (Integrated Development Environment) adeguato. A tal fine, una soluzione gratuita e affidabile \u00e8  Sublime Text , il cui file  exe  pu\u00f2 essere scaricato dal sito ufficiale e poi installato tramite semplice esecuzione.",
            "title": "Installare Sublime Text"
        },
        {
            "location": "/set-up-windows/#eseguire-uno-script",
            "text": "Nel seguente slider, viene sintetizzata la procedura per scrivere, tramite Sublime Text, uno script Python denominato  main.py , il quale stamper\u00e0 sulla linea di comando la scritta  Hello World. .",
            "title": "Eseguire uno script"
        }
    ]
}